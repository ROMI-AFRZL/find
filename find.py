import base64
exec(base64.b64decode('import base64
exec(base64.b64decode('aW1wb3J0IGJhc2U2NApleGVjKGJhc2U2NC5iNjRkZWNvZGUoJ2FXMXdiM0owSUdKaGMyVTJOQXBsZUdWaktHSmhjMlUyTkM1aU5qUmtaV052WkdVb0oyRlhNWGRpTTBvd1NVZEthR015VlRKT1FYQnNaVWRXYWt0SFNtaGpNbFV5VGtNMWFVNXFVbXRhVjA1MldrZFZiMG95UmxoTldHUnBUVEJ2ZDFOVlpFdGhSMDE1VmxSS1QxRllRbk5hVldSWFlXdDBTRk50YUdwTmJGVjVWR3ROTVdGVk5YRlZiWFJoVmpBMU1sZHJaRlppTUc5NVVteG9UbGRIVW5CVVZFSjJaREZPVmxremFHaFNNRFV4Vmtjd05WZHNXWHBhUlhoWVlrZG9kbGxyV25OT1YwWkpWV3h3V0ZKWVFUSlhWbFpyVWpKTmQyVklVbXhUUm5CaFZtcEdTMDVzVFhkVWJYUm9Za2RvU2xkcVRtdFViRXAxV25wQ1ZWWldTa1JYVkVwWFVsWkdXVnBHYkZSU01sRjZWa1pXWVU1Rk5VWk5WVlpTWWxVMWMxVnJWa2ROTVdSR1lVYzFhMDFFUmtoYVZWSlRWR3hLUmxOdGNHRldWa3BEV2xaYWIxTldiM3BhUlRWVFltMWpkMVpHVmxOUk1XdDVWbXRXVWxkSFVsTlZiVFZ1VFVaU1ZsVnJUbHBOYkZwR1ZWWm9hMWRXVGtoYVJFNVZWbGRvVUZkVVNsZFNWa1pWVW14c1ZGSXlVWHBXUmxwaFRrVTFSazFWVmxKaVZUVnpWV3RXUjAweFpISlhhbEpQVWxSR1JsVlhNVTlpUmtwR1VtcE9XR0V4YnpCVWExVjRVbFpLZEZSdGVGTlNWVmw2VjFkMFlVNUZOVVpOVlZaU1lsVTFjMVZyVmtkTk1WbDVaVVJTVDFKVVJrWlZWekZQWWtaS1JsSnFUbGhoTVc4d1ZHdFZlRkpXUm5SVWJYaFRVbFZaZWxZeWRHRk9SVFZHVFZWV1UySlZOWE5WYTFaSFRURnNjbGRxVWs5U1ZFWkdWVzB4VDJKR1NrWlNhazVYVFc1bk1GUnJWWGhTVmtwMFZHMTRVMUpWV1hwV01uUmhUa1UxUmsxVlZsSmlWVFZ6Vld0V1IwMHhaSEpYYWxKUFVsUkdSbFZ0TVU5aVJrcEdVbXBPV21FeGJ6QlVhMVY0VWxaT2RGUnRlRk5TVlZsNlZtcEtORTVGTlVaTlZWWlVZbFUxYzFWclZrZE5NV1J5VjJwU1QxSlVSa1pWVnpGUFlrWktSbEpxVGxoaE1XOHdWR3RWZUZKV1NuUlViWGhUVWxWWmVsZFhkR0ZPUlRWR1RWVldWV0pWTlhOVmExWkhUVEZaZVdWRVVrOVNWRVpHVmtjeFQySkdTa1pTYWs1WVlURnZNRlJyVlhoU1ZrWjBWRzE0VTFKVldYcFdNblJoVGtVMVJrMVZWbE5pVlRWelZXdFdSMDB4YkhKWGFsSlBVbFJHUmxaWE1VOWlSa3BHVW1wT1YwMXVaekJVYTFWNFVsWldkRlJ0ZUZOU1ZWbDZWakowWVU1Rk5VWk5WVlpTWWxVMWMxVnJWa2ROTVdSeVYycFNUMUpVUmtaVmJURlBZa1pLUmxKcVRscGhNVzh3Vkd0VmVGSldXblJVYlhoVFVsVlplbFpxU2pST1JUVkdUVlZXVjJKVk5YTlZhMVpIVFRGa2NsZHFVazlTVkVaR1ZWY3hUMkpHU2taU2FrNVlZVEZ2TUZSclZYaFNWa3AwVkcxNFUxSlZXWHBYVjNSaFRrVTFSazFWVmxoaVZUVnpWV3RXUjAweFdYbGxSRkpQVWxSR1JsWXlNVTlpUmtwR1VtcE9XR0V4YnpCVWExVjRVbFpHZEZSdGVGTlNWVmw2VmpKMFlVNUZOVVpOVlZaVFlsVTFjMVZyVmtkTk1XeHlWMnBTVDFKVVJrWlhhMlJQWWtaS1JsSnFUbGROYm1jd1ZHdFZlRkpXY0VoVWJYaFRVbFZaZWxZeWRHRk9SVFZHVFZWV1VtSlZOWE5WYTFaSFRURmtjbGRxVWs5U1ZFWkdWVzB4VDJKR1NrWlNhazVhWVRGdk1GUnJWWGhTVjBaSVZHMTRVMUpWV1hwV2FrbzBUa1UxUmsxVlZtaFNNRFZ6Vld0V1IwMHhaSEpYYWxKUFVsUkdSbFZYTVU5aVJrcEdVbXBPV0dFeGJ6QlVhMVY0VWxaS2RGUnRlRk5TVlZsNlYxZDBZVTVGTlVaTlZWWllZbFUxYzFWclZrZE5NVmw1WlVSU1QxSlVSa1pXTWpGUFlrWktSbEpxVGxoaE1XOHdWR3RWZUZKV1JuUlViWGhUVWxWWmVsWXlkR0ZPUlRWR1RWVldWR0pWTlhOVmExWkhUVEZzY2xkcVVrNVNiV2hLVjJwT2ExUnNTalpTYlhCYVlsaG5NRlJyVlhoU1ZrWjBVbXhzVTJWc1duRlhiRlpUVVcxUmVHRkZiR0ZOTWxKUFZtcEdTMkZzY0ZaVmEwcHJUVmRvU2xkcVRtdFViRWw0VTIxd1lWWldTa05hVjNodlUxWnZlbHBGTlZOTk1taHhWMnhXVTFFeVJsZGhSV3hoVFRKU1QxVnVjRWRoYkhCV1ZXdE9hR0pIYUVwWGFrNXJWR3hLZFZGdGNHRldWa3BFV1ZkNGIxTldiM3BhUlRWVFltMWpkMVpHVmxOU01rcEhZVVZzVkdKVk5YTlZhMVpIVFRGa2MxZHFVazlTVkVaR1ZUSXhUMkpHU2taU2FrNVlVbGRvZFZSclZYZGxSMVpGVldzMVUxSldjSEZYYkZaVFVXMVJlR0ZGYkdGTk1sSlBWbXBHWVdGc2NGWlZhMHBzVm0xb1NsZHFUbXRVYkVsNlVXMXdZVlpXU2tSWmExcHZVMVp2ZWxwRk5WTk5WWEJ4VjJ4V1UxRnJNVWRoUld4aFRUSlNUMVZ0Tlc1TlJsRjNWV3M1V2sxc1drWlZWbWh2VjFaT1NGcEVUbFZXVm04d1ZHdFZlRkpXU25Sa1JteFVVakpSZWxaSGVHRk9SVFZHVFZWV1VtSlZOWE5WYTJScVpERmtSbUZITld0TlJFWklXbFZTVTFSc1NrWlRiV2hZVWxkb2RWcEVSbmRqTWxaRlZXczFVMUpWY0hsV01GWnZZbTFSZDA1WVRteFNSa3BQVld0V1MyRkdaRVpoUnpWc1VsUkdTRnBWVWxOVWJFcEdVMjVLV0ZKWGFIVmFSRUV3WlVkV1JWVnJOVk5TVlhCeFYyeFdVMkpyTVVkaFJXeGhUVEpTVDFWdE5XNU5SbEpXVld0T1dsWnRhRXBYYWs1dlZHeGFkVnA2UWxWV1ZrcEVXVlJHYjFOV2IzcGFSa0pUWW0xamQxWkdWbE5STVd0NVZtdFdZV1ZyU2xwVk1HUnJUVEZTVmxkcVVrOVNWRVpHVlZjeFIxZFdUa2hhUkZKVlZqTm5NRlJyVlhoU1ZrWjBaRVpzVkZKcmNIRlhiRlpUVVcxUmVHRkZiR0ZsYkVwUVZXMDFiazFHVWxaVmEwNWFUV3hhUmxWV2FHdFhSMHBKV25wQ1ZWWnNTbEJYVkVwWFVsWkdXVnBIUmxOaWJXZDRWakJXYjJKdFVYZE5WV1JzVWtaS1VWVnJXa3RoYkhCV1ZXdEthMDFYYUVwWGFrNXJWR3hLZFZGdGNHRldWa3BIVkZWYWIxTldiM3BhUlRWVFRWVndjVmRzVmxOUk1rWlhZVVZzWVUweVVrOVZiVFZ1VFVaUmQxVnNUbHBOYkZwR1ZWWm9hMWRXVGtoYVJFNVZWbFp3TTFkVVNsZFNWa3BWVW14c1ZGSXlVWHBXUmxaclZqRnJlVlpyVmxOV1JYQmFWVEJrYTAweFVsWmFSazVhVFd4YVJsVlhNWGRYVms1SVdrUk9WVlpYVVhkWFZFcFhVbFpHV1dKR2JGUlNNbEY2VmtaV2IxTXhhM2xXYTFaU1YwZG9XbFV3Wkd0Tk1WSlhXa1prV2sxc1drWlZiR2h2VjFaT1NGcEVUbFZXVm04d1ZHdFZOVkpXVW5SVWJYaFRVbFZaZWxZd1ZtOWliVkYzVFZWa2JGSkdTazlWYTFaaFRWWmtSbUZITld0TlJFWklXbFZTVTFSc1NrWlRia3BZVWxkb2RWcEVRWGhXTWxaRlZXczFVMUpWY0ZaVmVrSmhUa2RXVjJGRmJHRk5NbEpQVlcwMWJrMUdVbFpWYTA1YVRXeGFSbFZXYUd0aFJscDFXbnBDV0dKVVJtaFhWRXBYVTBaa2RFMVdiRlJTTW1nd1ZqSXhORTVGTlVkalNGSllZWHBzVFZWdE5XNU5SbEpXVld0a1drMXNXa1pWVm1oclYxWk9TRnBFVGxWV1ZtOHdWR3RWZUZKV1JuRlJiR3hUWld4YWNWZHNWbE5SYlZGNFlVVnNZVTB5VWs5VmJUVnVUVVpTVmxWclRsZFdNRnBLVlRJeE5GZHNXWGhUYkVwYVlXdHJNVmw2UWpCU01sWkZWV3MxVTFKV2NIRlhiRlpUVVcxUmVHRkZiR0ZOTWxKUFZXMDFiazFHVWxaVmEwNU9VbTFvU2xkcVRtdFpWMHBKV25wQ1ZWWldTa1JYVkVwWFVsWkdXVnBHYkZSU01sRjZWa1pXVjFReVVuUlRibEpQVmpOb1lWUlVSa3RrTVd4eFUxUkdVMkpWTlRGVk1qVmhZVzFLYzFOdGNHRldWa3BEVkZWYWIxTldiM3BhUlRWVFltMWpkMVpHVmxOUk1XdDVWbXRXVWxkSFVuSldNRnBMWkVaUmQxcEZPVnBOYkZwR1ZWWm9iMWRXVGtoYVJFNVZWbFp2TUZSclZYaFNWa1owVkcxNFUxSlZXWHBXTUZadlltMVJkMDFZVG14U1JrcFBWV3RXUzJGc2NGWlZhMHByVFZkb1NsZHFUbXRVYkVwMVducENWVlpXU2xCWFZFcFhVbFpHV1ZwR2JGUlNNbEY2VmtaV1lVNUZOVVpOVlZaU1lURktXbFV3Wkd0Tk1WSldWMnBTVDFKVVJrWlZWekZQWWtaS1JsSnFUbHBsYTBwUVYxUktWMUpXUmxsYVJteFVVakpSZWxaR1ZtRk9SVFZHVFZWV1VtRnNTbEpWYlRWdVRVWlNWbFZyVGxCU2JXaEtWMnBPYTFSc1NuVmFla0pWVmxaS1JGbFVSbTlUVm05NldrVTFWMkp0WTNkV1JsWlRVVEZyZVZaclZsTldSVFZVVlcxd1EwMHhaRVpoUnpWclRVUkdTbFJXWkU5aVJrcEdVbXBTV0ZKWGFIVmFSRUY0VTFaV2RGUnRlRk5TVlZsNlZqQldiMkp0VVhkTlZXaHFVakExYzFWclZrZE9SbVJHWVVjMWEwMUVSa2xaTUdSUFlrWktSbEpxVmxoU1YyaDFXa1JCZUZOWFZraFViWGhUVWxWWk1GWXdWbTlpYlZGM1RWVmtiRkpHU2xGVmExVXhZV3h3VmxWclNteFNiV2hLVjJwT2ExUnNTblZhZWtKVlZsWktTRlJWV205VFZtOTZXa1UxVTJKdFkzZFdSbFpUVVRKT1YyRkZiR0ZOTWxKUFZtMDFiazFHVWxaVmEwNXFWbTFvU2xkcVRtdFVhekZaV25wQ1ZWWldTa1JYVkVwWFVsWnZlbU5HYkZSU01sRjZWa1pXWVU1Rk5VWk5WVlpTWWxVMWMxVnJWa2RPUm5CR1YycFNUMUpVUmtaV1Z6RlBZa1pLUmxKcVRscFdNMmN3Vkd0VmVGSldXblJVYlhoVFVsVlplbFl5ZEdGT1JUVkdUVlZXVkdKVk5YTlZhMVpIVFRGa1JtRkhOVTlTVkVJMFdsVlNVMVJzU2taWGJYQmhWbFpLUTFwRVJtOVRWbTk2V2tVMVdGSldjSEZYYkZaVFVUSkdWMkZGYkdGTk1sSlBWVzB4VTJOc1pFWmhSelZyVFVSR1NGcFZVbE5VYkVwR1UyeFdWRTFHYnpCVWExVjRVbFpTZEZSdGVGTlNWVmw2VmpCV2IySnRVWGROVldSc1VrWktUMVZyVmt0VlJtdzJVbXBTVDFKVVJrWlZiVEZQWWtaS1JsSnFUbGhTVjJoMVdrUkJlRkl5VmtWVmF6VlRVbFZ3Y1ZkWE1IaGhNV3Q1Vm10b1ZGWkdTbHBWTUdSclRrWmtjMWRxVWs5U1ZHeEdWbTB4VDJKR1NYaFhia0pYVm14dk1GUnJXbk5qVjBaSVZHMTRVMUl6YUhwV1ZXaHpZakZyZVZaclZsSldSWEJhVlRCa2EwMHhVbFpYYWxKUFVsUkdSbFZYTVU5aVJrcEdVbXBPWVZKV2J6QlVhMVY0VWxaU2RGUnRlRk5TVlZsNlZqQldiMkp0VVhkTlZXUnNVa1pLVDFWclZrdE9iSEJYWVVVNVRsSnRhRXBYYWs1clZESktTVnA2UWxWV1ZrcEVWMVJLVjFKV1JsbGFSbXhVVWpKUmVsWkdWbTlVTURGSFkwVm9VRlpGV25KVk1GcExZV3h3VmxWclNrNVdiV2hLVjJwT2ExUnNTblZhZWtKVlZsWktSRmRVU2xkU1ZrWlpXa2QwVGsxSVFqTlhhMVpyVmpBeFIyRkZiR0ZOTWxKUVZtMDFiazFHVWxaVmEwNWFUV3hhUmxWV2FHdFhWazVJV2tST1ZWWlhVbWhaZWtwVFYxWlNkRTlYZEZOaWJXTjNWa1pXVTFVeGEzbFdhMVpTVjBkU1dsVXdaR3ROTVZKV1YycFNUMUpVUmtaVlYzQkRZVVphTmxKdVRtRlNWbTh3Vkd0VmVGSldXblJVYlhoVFVsVlplbFl3Vm05aWJWRjNUVlZrYkZKR1NrOVZhMVpMVG14c2NscEdaR2xTTURWRldWVmtUMkpHU2taU2FsWllVbGRvZFZwRVFYaFNNbFpGVldzMVUxSlZjSEZYYkZaVFVXMVJlVlZyWkd4U1JrcFBWV3RXWVdGc2NGWlZhMHByVFZkb1NsZHFUbXRVYkVwMVducENWVlpXU2tSVWJURlRVakpXUlZWck5WTlNWbkJ4VjJ4V1UxRnRVWGhoUld4aFRUSlNUMVZ0Tlc1TlJsSldWV3RPYVZKWVVraGFWVkpUVkd4S1JsTnRjR0ZXVmtwRFdrUkdiMU5XYjNwYVJUVlRZbTFqZDFaR1ZsTlJiVWw0WVVWc1lVMHlVazlWYlRWdVRVWlNWbFZyVGxwTmJGcEdWVlpvYTFkV1RraGFSRTVWVmxkb1VGZFVTbGRTVmtaWllrWnNWRkl5VVhwV1JsWmhUa1UxUmsxVlZsSmlWVFZ6Vld0V1IwMHhaSEphUjNST1VtMW9TbGRxVG10VU1WcDFXbnBDVlZaV1NrUlhWRXBYVWxaR1dWcEdiRlJTTWxGNlZrWldhMlF5UmtoVGEyaFRZbXhhV2xWdWNGZGhiSEJXVld0S2EwMVhhRXBYYWs1clZHeEtkVnA2UWxWV1ZrcEVXbGQ0YjFOV2IzcGFSa0pUWW0xamQxWkdWbE5STVd0NVZtdFdVbGRIVWxwVk1HUnJUVEZTVmxkcVVrOVNWRVpHVlZjeFQySkdTa1pTYWxKWVVsZG9kVnBWVlhoV01sWkZWV3MxVTFKV2NIRlhiRlpUVW0xUmVHRkZiR0ZOTWxKUFZtMDFiMDVXWkVaaFJ6VnJUVVJHV2xaSE1VOWlSa2wzWWtSU1dGSlhhSFZhUkVGNFZqSldSVlZyTlZOU1ZYQnhWMnhXVTFGdFVYZGlSVkpTVmpKU1MxVlVRa2RpYkdSR1lVYzFiRkp0ZUhwWmVrNXJWVWRXZEdNemJGcGlSbTh3V2taV2MxSkdSbGhhUm14c1ZsVmFkVlV4VmxwT1JtOTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFpyTVZkdGVHOU9Wa1pZV2tWd1VrMUZjSFJWTVZaUFVXeHZlRm96YUZCV01YQmFWRlpTYjJKc1pFbGlSVXBoVFVkNFJWVldaR3RYVmtvMlZXMDFWRlpYWjNwWGFrcGhVa1pHY1dGRmNGUlRSMmgwVmpCU1JrNUdiM2RpUldSUVZqRndXbHBXVmt0aVZrNVdWMVJXWVdFeWVFVlZWM0J2VjFkV1ZsTnRNV0ZoTVdzeFYyMHhZVkpHUm5GaFJYQlVVMGRTZFZVeFZscE9WbkJ6V2pOd2EwMXRVblJWYlhCellsWk9WbFJyVGxwTmEzQjNWVlprYTJKV1JYZFRWRkpVVmxkbmVsZHFRalJPVmtaMFYyeHNUazB5VVhsVk1WWmFUa1p2ZUdGRlpHdE5iVkphVlZSS1UySldaRVZVYWs1aFRVZDRTbHBFU210aVZrWTJZVWMxV0ZKRmNFTlhha3BoVWtaR2NXRkZjRlJUUjJoMFZURldUMUV3T1VaaVJXUnJUV3BXV2xwV1ZrdGhiR1JHVkd0T1drMXJjSGRWVm1ScllsWkZkMU5VVWxoU1JUUjZWMnBHYjFJeVZraFhiR3hzVmxWd2NWWXdWazlSYkc5NFdqTm9VRk5HY0V0Vk1HaHJZbXhPVmxSclNtRk5SM2hLV2tSS2EySldSWGRTYmxwWVVrVTBlbGRxU21GU1JrWnhZVVZ3VWsxRmNIUlhiWFJQVVRBNVJtSkZiR3hTTVhCTlZsUkNTazVHWkVaWmVrSmhUVWQ0UlZWWE1VOVhWa3B4WWtjeFdGTkhjekZVTUZwdVpVVTVXRmRyTVU1WFIyaHhWakJTUms1V2NIUlhhMlJRVmtkb1MxVlVRa2RpYkU1V1lVUlNZV0pIWkRSVU1XUlBWMVpLY1dKSE1WVlNWbXN4VkRCV2MxTlhWa2hYYlRGU1RVVmFkVlV4Vm05T1JuQnlaVWhPVUZZeGNFNWFWbFpMWVd4c2RHVkVVazlTVkVaWlZUSXhTMVJzU2tsVVZFWlZWbTFPTTFkcVFuTlNNbFpGVlcxR1YxSllRbkZYYkZaVFltMVJlR0ZGYkdoU01taFBXVlpXUzJGc2NGWlZhMlJvVm0xUk1sVldVbXRWUmxwR1RsUkNWbUpVUmt0WGFrSnpVa1pHV0ZwR2JGUlNNbEV3VmpGa05HVnRVWGRQVkZwb1RUSm9jRlpVUWtaTmJHUkdZVWMxYkZKdGVIcFplazVyVlVkV2RHUkVXbHBpUlRWRVdXeGFjMWRHVW5SbFJuQnBWa2QzZVZkV2FISk5WMFowVTFoc1RsTkdjSEZaYkZKelRVWnNWMVJVUm14V01GcGFXVEJrYjJGV1JqWlZXR2hWVFVadk1GcEdXbTlUVm05NllVWndhVk5GTkhwV1JFNTNZMjFXU0ZOc1VsSldNbEphVlRCa2IyTXhVbGhsUkZKUFVsUnNSbFZYTVU5aVJrbDNWbXBXVkZaV2J6QlVhMVY0VjBaT2RGTnJOVk5UUlRCNFZrWlNTbVZIU25SU2JHeFdZbFJzY2xacVFuZGhiSEJXVld0a2FGWnRVVEpWVmxKclZVWmFSbGRxUWxSV1Zrb3pWMVJLVjFKV1NuUmlSbWhzWVRCVmVsWkVSbE5VTWxKR1lrVm9ZVk5GU25KVmFrcHVaVVprV0dGNlJtaGlWV3cxVkZWb1lWWnRSalppUlRsV1RWVXhORlZYZUV0ak1VNTBVbXhXVWsxRlduVlZNVlpQVVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdE9hR0pIYUVwWGFrNXJWR3hLZFZwNlFsVldWa3BFVjFSS1YxSldSbGxhUm14VVVqSlJlbFpHVm1GT1JUVkdUVlZXVW1KVk5YTlZhMVpIVFRGa1JtRkhOV3ROUkVaSVdsVlNVMVJzU2taVGJYQmhWbFpLUTFwV1dtOVRWbTk2V2tVMVUySnRZM2RXUmxaVFVURnJlVlpyVmxKWFIxSlRWRlpvYmsxR1VsWlZhMDVhVFd4YVJsVldhR3RYVms1SVdrUk9WVlpYYUZCWFZFcFhVbFp3TmxGc2JGUlNNbEY2VmtaV1lVNUZOVVpOVlZaU1lsVTFjMVZyVmtkTk1YQkdWMnBTVDFKVVJrWlZWekZQWWtaS1JsSnFUbHBXTTJjd1ZHdFZlRkpXU25SVWJYaFRVbFZaZWxZeWRHRk9SVFZHVFZWV1UySlZOWE5WYTFaSFRURmtSbUZITlU5U1ZFSTBXbFZTVTFSc1NrWlhiWEJoVmxaS1ExcEVSbTlUVm05NldrVTFXRkpyY0hGWGJGWlRVVzFXVjJGRmJHRk5NbEpQVld4a1UxTnNjRVpYYWxKUFVsUkdSbFpITVU5aVJrcEdVbXBPV2xZelp6QlVhMVY0VWxaV2RGUnRlRk5TVlZsNlZqSjBZVTVGTlVaTlZWWlVZbFUxYzFWclZrZE5NV1JHWVVjMVQxSlVRalJhVlZKVFZHeEtSbGR0Y0dGV1ZrcERXa1JHYjFOV2IzcGFSVFZYVFZWd2NWZHNWbE5SYlZaellVVnNZVTB5VWs5VmJHUlRVMnh3UmxkcVVrOVNWRVpHVmtjeFQySkdTa1pTYWs1YVZqTm5NRlJyVlhoU1ZsWjBWRzE0VTFKVldYcFdNblJoVGtVMVJrMVZWbFJpVlRWelZXdFdSMDB4WkVaaFJ6VlBVbFJDTkZwVlVsTlViRXBHVjIxd1lWWldTa05hUkVadlUxWnZlbHBGTlZkTlZYQnhWMnhXVTFGck1VZGhSV3hoVFRKU1QxVnNaRk5UYkhCR1YycFNUMUpVUmtaV1J6RlBZa1pLUmxKcVRscFdNMmN3Vkd0VmVGSldWblJVYlhoVFVsVlplbFl5ZEdGT1JUVkdUVlZXVkdKVk5YTlZhMVpIVFRGa1JtRkhOVTlTVkVJMFdsVlNVMVJzU2taWGJYQmhWbFpLUTFwRVJtOVRWbTk2V2tVMVYwMVZjSEZYYkZaVFVXc3hWMkZGYkdGTk1sSlBWV3hrVTFOc2NFWlhhbEpQVWxSR1JsWkhNVTlpUmtwR1VtcE9XbFl6WnpCVWExVjRVbFpXZEZSdGVGTlNWVmw2VmpKMFlVNUZOVVpOVlZaVVlsVTFjMVZyVmtkTk1XUkdZVWMxVDFKVVFqUmFWVkpUVkd4S1JsZHRjR0ZXVmtwRFdrUkdiMU5XYjNwYVJUVlhUVlZ3Y1Zkc1ZsTlJhekZ6WVVWc1lVMHlVazlWYkdSVFUyeHdSbGRxVWs5U1ZFWkdWa2N4VDJKR1NrWlNhazVhVmpObk1GUnJWWGhTVmxaMFZHMTRVMUpWV1hwV01uUmhUa1UxUmsxVlZsUmlWVFZ6Vld0V1IwMHhaRVpoUnpWUFVsUkNORnBWVWxOVWJFcEdWMjF3WVZaV1NrTmFSRVp2VTFadmVscEZOVmROVlhCeFYyeFdVMUZ0Vm5OaFJXeGhUVEpTVDFWc1pGTlRiSEJHVjJwU1QxSlVSa1pXUnpGUFlrWktSbEpxVGxwV00yY3dWR3RWZUZKV1ZuUlViWGhUVWxWWmVsWXlkR0ZPUlRWR1RWVldWR0pWTlhOVmExWkhUVEZrUm1GSE5VOVNWRUkwV2xWU1UxUnNTa1pYYlhCaFZsWktRMXBFUm05VFZtOTZXa1UxV0ZKcmNIRlhiRlpUVVdzeFYyRkZiR0ZOTWxKUFZXMDFiazFHVVhkVmF6bGFUV3hhUmxWV2FHdFhWazVJV2tST1ZWWldiekJVYTFWNFVsWktkR1JHYkZSU01sRjZWa1pXWVU1Rk5VWk5WVlpTWWtaS1RWVnROVzVOUmxKV1ZXMTBXazFzV2taVlZtaHJWMVpPU0ZwRVRsVldWbTh3Vkd0VmVGSldSbkpQVjNSVFltMWpkMVpHVmxOV01XdDVWbXRXVWxkSFVscFZNR1JyVFRGU1ZsZHFVazlTVkVaR1ZWY3hkMkZXU1hoWGJUbGFUV3BHY2xkVVNsZFRSbHAwWTBaYVYySnRZM2RXTVdSM1lqRnJlVlpyVmxOaVdHaGFWVEJrYWsxR1VuTlhhbEpQVW01Q1dWVXlNVTlpUmtsM1lrUlNWbEpGTlZCWFZFcFhVMFpLVlZac2JGUlNNbEY2VmtaV1lVNUZOVVpOVlZaU1lsVTFjMVZyVmtkTk1XUkdZVWMxYkZKdGVIcFplazVyVlVkV2RHUkVXbHBpUm04d1ZHdGFkMVpXVG5SVWJYaFRVak5PTTFZd1ZtOWlhelZHVFZWa2JGSkdTbWhXYTFaM1lXeHdWbFZ1U2s1U2JXaEtWMjV3VTFSc1NuVmFla0pZWWtaS1RGZFVTbGRTVjBZMlVXeHNWRkl5VFhkV1JsWmhUa1UxUjJOR1ZsUmlWVFZ6Vld0a2VtUXhaRVpoUnpWUFVsUkdTRnBWVWxOWlZscEdZMGR3WVZaV1NubFVWVnB2VTFad05sVnJOVk5pYldOM1ZqSjRVMU14YTNsV2ExWm9aV3RLV2xVd1pHcE5SbEpXVjJwU1QxSnVRbFpWTWpGUFlrWktTR016WkZoU1YyaDFWR3RWZUZJeVZrVlZiVVpYVWxoQ2NWZHNWbE5qYXpGSFlVVnNZV1ZzU2s5VmJUVnVUVVprYzFWcmRGcE5iRnBHV1Zod1ExZFdUa2haZWtKVlZsWnZNRlJyV25kV1ZrNTBWRzE0VTFJelRqTldNRlp2WW1zMVJrMVZaR3hTUmtwb1ZtdFdkMkZzY0ZaVmJrcE9VbTFvU2xkdWNGTlViRXAxV25wQ1dHSkdTa3hYVkVwWFVsZEdObEZzYkZSU01rMTNWa1pXWVU1Rk5VZGpSbFpVWWxVMWMxVnJaSHBrTVdSR1lVYzFUMUpVUmtoYVZWSlRXVlphUm1OSGNHRldWa3A1VkZWYWIxTldjRFpWYXpWVFltMWpkMVl5ZUZOVE1XdDVWbXRXYUdWclNscFZNR1JxVFVaU1ZsZHFVazlTYmtKV1ZUSXhUMkpHU2toak0yUllVbGRvZFZSclZYaFNNbFpGVlcxR1YxSllRbkZYYkZaVFkyc3hSMkZGYkdGbGJFcFBWVzAxYmsxR1pITlZhM1JhVFd4YVJsbFljRU5YVms1SVdYcENWVlpXYnpCVWExcDNWbFpPZEZSdGVGTlNNMDR6VmpCV2IySnJOVVpOVldSc1VrWkthRlpyVm5kaGJIQldWVzVLVGxKdGFFcFhibkJUVkd4S2RWcDZRbGhpUmtwTVYxUktWMUpYUmpaUmJHeFVVakpOZDFaR1ZtRk9SVFZIWTBaV1ZHSlZOWE5WYTJSNlpERmtSbUZITlU5U1ZFWklXbFZTVTFsV1drWmpSM0JoVmxaS2VWUlZXbTlUVm5BMlZXczFVMkp0WTNkV01uaFRVekZyZVZaclZtaGxhMHBhVlRCa2FrMUdVbFpYYWxKUFVtNUNWbFV5TVU5aVJrcElZek5rV0ZKWGFIVlVhMVY0VWpKV1JWVnRSbGRTV0VKeFYyeFdVMk5yTVVkaFJXeGhaV3hLVDFWdE5XNU5SbVJ6Vld0MFdrMXNXa1paV0hCRFYxWk9TRmw2UWxWV1ZtOHdWR3RhZDFaV1RuUlViWGhUVWpOT00xWXdWbTlpYXpWR1RWVmtiRkpHU21oV2ExWjNZV3h3VmxWdVNrNVNiV2hLVjI1d1UxUnNTblZhZWtKWVlrWktURmRVU2xkU1YwWTJVV3hzVkZJeVRYZFdSbFpoVGtVMVIyTkdWbFJpVlRWelZXdGtlbVF4WkVaaFJ6VlBVbFJHU0ZwVlVsTlpWbHBHWTBkd1lWWldTbmxVVlZwdlUxWndObFZyTlZOaWJXTjNWako0VTFNeGEzbFdhMVpvWld0S1dsVXdaR3BOUmxKV1YycFNUMUp1UWxaVk1qRlBZa1pLU0dNelpGaFNWMmgxVkd0VmVGSXlWa1ZWYlVaWFVsaENjVmRzVmxOamF6RkhZVVZzWVdWc1NrOVZiVFZ1VFVaa2MxVnJkRnBOYkZwR1dWaHdRMWRXVGtoWmVrSlZWbFp2TUZSclduZFdWazUwVkcxNFUxSXpUak5XTUZadlltczFSazFWWkd4U1JrcG9WbXRXZDJGc2NGWlZia3BPVW0xb1NsZHVjRk5VYkVwMVducENXR0pHU2t4WFZFcFhVbGRHTmxGc2JGUlNNazEzVmtaV1lVNUZOVWRqUmxaVVlsVTFjMVZyWkhwa01XUkdZVWMxVDFKVVJraGFWVkpUV1ZaYVJtTkhjR0ZXVmtwNVZGVmFiMU5XY0RaVmF6VlRZbTFqZDFZeWVGTlRNV3Q1Vm10V2FHVnJTbHBWTUdScVRVWlNWbGRxVWs5U2JrSldWVEl4VDJKR1NraGpNMlJZVWxkb2RWUnJWWGhTTWxaRlZXMUdWMUpZUW5GWGJGWlRZMnN4UjJGRmJHRmxiRXBQVlcwMWJrMUdaSE5WYTNSYVRXeGFSbGxZY0VOWFZrNUlXWHBDVlZaV2J6QlVhMXAzVmxaT2RGUnRlRk5TTTA0elZqQldiMkpyTlVaTlZXUnNVa1pLYUZaclZuZGhiSEJXVlc1S1RsSnRhRXBYYm5CVFZHeEtkVnA2UWxoaVJrcE1WMVJLVjFKWFJqWlJiR3hVVWpKTmQxWkdWbUZPUlRWSFkwWldWR0pWTlhOVmEyUjZaREZrUm1GSE5VOVNWRVpJV2xWU1UxbFdXa1pqUjNCaFZsWktlVlJWV205VFZuQTJWV3MxVTJKdFkzZFdNbmhUVXpGcmVWWnJWbWhsYTBwYVZUQmthazFHVWxaWGFsSlBVbTVDVmxVeU1VOWlSa3BJWXpOa1dGSlhhSFZVYTFWNFVqSldSVlZ0UmxkU1dFSnhWMnhXVTJOck1VZGhSV3hoWld4S1QxVnROVzVOUm1SelZXdDBXazFzV2taWldIQkRWMVpPU0ZsNlFsVldWMmhQV2tWYWIxTldiM3BhUlRWVFltMWpkMVpHVmxOUk1XdDVWbXRXVWxkSFVscFZNR1JyVGtaa1dHVkljR3ROUkdzeVdWUk9kMkZXV2taV2FrWllVbGRvZFZwVlduTmpNazE2V2taQ2JHSllUalpYVjNoUFVURktSMkpHYkZSaWEwcExWV3hrTkdOc1RsWldXR2hwVWpCd01GZHJZekZoTVZvMlZtMDVXbFpGY0VoYVJsWnpVakZhZFdOSFJsaFNXRUY0VmpGYWFtVkhTa2hVYWxaT1ZqQTFjMVZyVmtkTk1XUkdZVWMxYTAxRVJraGFWVkpUVkd4S1JsTnRjR0ZXVmtwSVdWWmFhMDVzUmxWYVJrSlhVbFJWZDFaR1pISk5WbXQ1Vm10V1UySlhlRmxhVjNSR1RURlJlRlZ0ZEd0U1YzaEhWa2N4YjJGdFNsaGtSelZYWWtkb1VGbHJaRTlrUlRWWVlVZHNWMDFXV25WV2ExcHJWakpTVjJJemJHRlNSVnB3V1d4V1lXVldaRmRaZWtKaFRWVTFXVlpYTlhkWFZrNUlXa1JTVlUxR2J6QlVhMVY0VWxaR2RGUnRlRk5TVlZsNlZqQldiMkp0VVhkTlZXUnNVa1pLVDFacVFuZGhWbEpXVlc1d1QxWlVRalZVVldoclZGZEtTVnA2UWxWV2JWSk1WMWR6ZUZKWFRqWldhemxPWVd0S2RWWlljRXRXTWxKSFlraFNVMkpyTlc5V1ZFcHZZV3h3VmxWclNrNWlSMmhLVjJwT2ExUnNTblZhZWtKVlZsWktSRmRVU2xkU1ZrWlpXa2QwVTJKdFkzZFdSbFpUVXpGcmVWWnJWbEpYUjFKYVZUQmthMDB4VWxaWGFsSlBVbFJHUmxWWE5XRmhhekI0VTIxd1lWWldTa05VVjNodlUxWnZlbHBGTlZOaWJXTjNWa1pXVTFFeGEzbFdhMVpTVjBkU2NWUlVTalJPYkhCR1drWmthMUl4U2toYVZWSlRWR3hLUjFOdGNHRldWa3BEV2tSR2IxTldiM3BhUlRWVFltMWpkMVpHVmxOUk1rMTVVMWhzWVZOR2NGZFphMmh1VFVaU1ZsVnRkRnBOYkZwR1ZWWm9hMWRXVGtoYVJFNVZWbFp2TUZSclZYaFNWa1p6Vkd4c1ZGSXlVWHBXUkVKaFRrVTFSazFWVmxKaVZUVnpWV3RXUjAweFpFWmhSelZyVFVSR1NsWlhNVTlpUmtwR1VsaG9XRkpYYUhWYVJFRjRVakpXUlZWck5WTlNWWEJ4VjJ4V1UxRnRVWGxVYTJocFUwVTFiMVpxU210a2JHUkdZVWMxYTAxRVJraGFWVkpUVkd4S1JsTnRjR0ZXVmtwRFdrUkdiMU5XYjNwYVJUVlNUVzFvY1Zkc1ZsTlJiVkY0WVVWc1lVMHlVazlWYlRWdVRVWlNWbFZyVGxwTmJGcEdWVlpvYTFSR1NuVmFla0pWVmxaS1JGZFVTbGRTVmtaWldrWnNWRkl5VVhwV1JsWmhUa1UxUmsxVlZsSmlia0phVlRCa2EwMHhVbGhsUkZKUFVsUkdSbFZYTVU5aVJrcEdVbXBPV0ZKWGFIVmFSRUY0VTBaV2RFNVhkRk5pYldOM1ZrWldVMVV4YTNsV2ExWlNWMGRTV2xVd1pHdE5NVkpXVjJwU1QxSlVSa1pWVnpWVFdWWmFObFpZYUZoU1YyaDFXbFZhZDFJeVZrVlZhelZUVWxWd2NWZHNWbE5SYlZGNFlVVnNZVTB5VWs5Vk1GVXhZV3h3VmxWclpHaGlSMmhLVjJwT2ExUnNTblZhZWtKVlZsWktSRmRVU2xkU1ZrWlpXa1pzVkZJeVVYcFdSbFpoVGtVMVJrMVZWbE5pVlRWeFdXdG9iazFHVWxaVmEyUmFUV3hhUmxWV1VrZFhWazVJV2tST1ZWWldiekJhVmxwdlUxWnZlbHBGTlZkaWJXTjNWa1pXVTFZeGEzbFdhMVpTVjBkU1dsVXdWbmRoYkhCV1ZXdEtiRkp0YUVwWGFrNXJWREZhZFZwNlFsVldWa3BFVjFSS1QyTXlWa1ZWYXpWVFVsWndjVmRzVmxOUmF6RlhZVVZzWVUweVVrOVZiVFZ2VGxaa1JtRkhOV3ROUkVaWVdsVlNVMVJzU2tkWGJYQmhWbFpLUTFwRVJtOVRWazUwVkcxNFUxSlZXVEJXTUZadlltMVJkMDVXWkd4U1JrcFBWV3RXUzJGc2EzbGxSRkpQVWxSR1JsVnRNWGRYVms1SVdrUk9WVlpXYnpCVWExVjRVbFpHZEZSdGVGTlNWVmw2VmpCV2IySnRVWGROVldSc1VrWktUMVZyVm1GaGJIQldWV3RLYTAxWGFFcFhhazVyVkd4S2RWcDZRbFZXVmtwRVYxUktWMUpXUmxsaVJteFVVakpSZWxaR1ZtRk9SVFZHVFZWV1VtSlZOWE5WYTFaSFRURldWVkpxVWs5U1ZFWkdWVmN4VDJKR1NrWlNhazVZVWxkb2RWcEVRWGhUVmxKeFZteHNWRkl5VVhwV1JsWmhUa1UxUmsxVlZsSmlWVFZ6Vld0V1IwMHhjRVpYYWxKUFVsUkdSbFZYTVU5aVJrcEdVbXBPV0dFeGJ6QlVhMVY0VWxaS2RGUnRlRk5TVlZsNlZqQldiMkpyTlVaTlNHaHNVa1pLVDFWclZtRmhiSEJXVld0S2EwMXNjRmhhVlZKVFZHeEtSbE50Y0dGV1ZrcERXa1JLWVZJeVZrVlZhelZUVWxWd2NWZHNWbE5SYlZGNFkwVmtiRkpHU2s5VmExWjNZV3h3VmxWclNtdE5hMVkwV2xWU1UxUnNTa1pqUjNCaFZsWktRMXBFU2s5ak1sRjVUbFpzVkZJeVVYcFdSbFpyVlRGcmVWWnJWbEpYU0VKYVZUQmthMDB4VWxaV2JYUlVWakZLU0ZwVlVsTlViRXBHVjIxd1lWWldTa05hUkVadlUxWndObFZyTlU1WFIyTjNWa1pXVTFFeGEzbFdhMVpTVjBkU1dsVXdaR3ROTVZKWFdYcEdWVTFYYUVwWGFrNXJWR3hPU1dGSGNHRldWa3BEV2tSR2IxTldiM3BhUlRWVFRWVndjVmRzVmxOUmF6RkhZVVZzWVUweVVrOVZhazVUWVd4d1ZsVnJTbXhXYldoS1YycE9hMVJzVGtaaGVsWllVbGRvZFZwRVFYaFRWbFowVkcxNFUxSlZXVEZXTUZadlltMVJkMDFWWkd4U1JrcFJWV3RWTVdGc2NGWlZhMHByVFZkb1NsZHFUbXRVYkVwMVducENWVlpXU2toYVJsVTFVakpXUlZWck5WTlNWV3N3VmpCV2IySnRVWGROVldSc1VrWktUMVZyVmt0amJHUkdZVWMxYTAxRVZsaGFWVkpUVkd4S1JsTnViRmhTVjJoMVdrUkJlR015VmtWVmF6VlRVbFZ2TVZac1VrZE9SVFZHVFZWV1VtRnJTbHBWTUdSclRURlNWVkpxVWs5U1ZFWkdWVmN4VDJKR1NraGFSRnBZVWxkb2RWcEVRWGhTTWxaRlZXczFVMUpWY0hGWGJGWlRVVzFXU0ZOdVFsUmlWVFZ6Vld0V1IwMHhjSEpYYWxKUFVsUkdSbFZYTVU5aVJrcEdVbXBPV0dFeGJ6QlVhMVY0VWxaa2RGUnRlRk5TVlZsNlYxWlNSMDVGTlVaTlZWWlVZbFUxYzFWclZrZE5NV3Q1VFZoT1drMXNXa1pWVm1ocllURktkVnA2UWxWV1ZrcFVWMVJLVjFKV1JsbGFSbXhVVWpKTmQxWkdVa2RPUlRWR1RWVldVbUpWTlhOVmExWkhUVEZrUm1GSE5XdE5SRVpaVkd4a1QySkdTa1pUYmtaWVVsZG9kVnBFUVhoVFJsWjBWRzE0VTFKVlZqWldNRlp2WW0xUmQwMVZXbUZTVjNoeVZXMDFiazFHVWxaVmEyUmFUV3hhUmxWV2FHdFhWazVJV1hwQ1ZWWkZXVEJVYTFWNFVsWkdkRlJ0ZUZOU1ZWbDZWakJXYjJKdFVYZE5WbWhXWWxVMWMxVnJWa2ROTVdSR1lVYzFhMDFFUmtoV1JtTTFWMVpPU0ZwRVRsVk5SbTh3Vkd0VmVGSldSblJVYlhoVFVsVlplbFl3Vm05aWJWRjNUVlZhVDFkSVFscFZNR1JyVGtaU1YxZHFVazlTVkVaR1ZWY3hUMkpHU2taU2FrNVlVbGRvZFZwRVFYaFNNbFpGVldzMVYwMUlRbkJXUmxaVFpXczFWazFJYkU1VFJrcFNXV3RvYmsxR1VsZGFSWFJhWVhwR1Jsa3pjRmRVYXpGeFVXMDFZVkpXYnpCVWExVjRVbFpHZEZSdGVGTlNWVmw2VmpCV2IySnRVWGROVldSc1VrWktUMVZyVmt0T2JHUkdWRzEwV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVm04d1ZHdFZlRkpXUm5SVWJYaFRVbFp3ZDFacVRuZFJhelIzVDFaV1lWTkdTazFWYlRWdVRVWlNWMXBGZEZwaGVrWkdXVE53VjFSc1dqWlJiVGxZVWxkb2RWcFZXbk5qTWsxNldrWkNiR0pZVGpaWFYzaFBZMnh2ZUZSc2JGVmlhMHBMVlcweE5HUldUbFpXYTNScFVqQndNRlZ0TlhOVGJFVjNWMWhrV0ZKWGFIVmFSRUY0VmpKV1JWVnJOVk5TVlhCeFYyeFdVMUZ0VVhoaFJXeGhUVEpTVDFWclZscGtNV1JHWVVjMWEwMUVSbGhhVlZKVFZHeEtSbE50Y0dGV1ZrcERXa1JHYjFOV2IzcGFSVFZUVWxjNU0xWXdWbTlpYlZGM1RWWmtiRkpHU2s5VmExWkxZV3h3VmxWclNtdE5WMmhLVjJwT2ExUnNTa1pUYWxwWVVsVTFjbGRVU2xkU1ZrWlpXa1pzVkZJeVVYcFdSbFpoVGtVMVJrMVZWbEppVlRWelZXdFdZV05HV1hwalJVcFBUVVJzVmxkcmFGTlVSa3AxV25wQ1ZWWnRVa3hYVjNONFVsZE9ObFpyTlZkbGEwcDJWakJXYjJKdFZrZGlTRTVxVFRKU1VWcFhNWHBsYkd4elZHNUtZVTFWTlZwV1J6VkRVMnhPU0dWSVZsUldWMUpNV1d0a1MyUkdTblZpUlhCU1RVWmFNbFl3Vm05aWJWRjNUbFprYkZKR1NrOVZhMVpMWVd4d1ZsVnJTbXROVjJoS1YycE9hMVJzVGtkVGJYQmhVbFp2TUZSclZYaFNWa1owVkcxNFUxSlZXWHBXTUZadlltMVJkMDFWYkZSaVYyaHlWRlpTYzJReGJIUk9WVTVPVmpGS1NGVXlNVTlpUmtwR1ZtcE9XRkpYYUhWYVJFRjRVakpXUlZWck5WTlNWWEJ4VjJ4V1UxRnRVWGxWYTJSc1VrWktUMVZyVm5kaGJIQldWV3RLYTAxWGFFcFhhazVyVkd4S2RWcDZRbFZXVmtwRVdUQmFkMU5XVm5SVWJYaFRVbFZXTTFZd1ZtOWliVkYzVFZWa2JGSkdTazlWYTFaTFlXeHdWbFZyU210TmJFcGFWa2N4TkdGdFNuTlRiWEJoVmxaS1ExUlhlRzlUVm05NldrVTFVMkp0WTNkV1JsWlRVVEZyZVZaclZsSlhSMUp2VkZkNFlXVnNjRWRhUldSc1ZsaFNTRnBWVWxOVWJFcEdWMjF3WVZaV1NrTmFSRVp2VTFadmVscEZOVk5pYldOM1ZrWldVMUV3TVVkaFJXeGhUVEpTVDFSV2FHNU5SbEpXVld0T1drMXNXa1pWVm1oclYxWk9TRnBFVGxWV1YyaFlXVEl4UjFaSFJraFViWGhUVWxWWmVsWXdWbTlpYlZGM1RWVmtiRkpHU2s5VmExWkxZV3h3VmxWclNtdE5TRkpJV2xWU1UxUnNTa1pUYlhCaFZsWktRMXBFUm05VFZtOTZXa1UxVTJKdFkzZFdSbFpUVVRKV2MyRkZiR0ZOTWxKUFdXdG9iazFHVWxaVmEwNWFUV3hhUmxWV2FHdFhWazVJV2tST1ZWWlhVbFJaYlhoWFl6SldSVlZyTlZkU1ZYQnhWMnhXVTFGdFVYaGhSV3hoVFRKU1QxVnROVzVOUmxKV1ZXdEthbEp0YUVwWGFrNXJWR3hLZFZwNlFsVldWa3BFVjFSS1YxSldSbGxhUjNCT1YwZGpkMVpHV2xOaU1XdDVWbXRXVWxkSFVscFZNR1JyVFRGU1ZsZHFVazlTVkVaR1ZWY3hUMkpHU2taU2FrNVlVbGRvZFZwRVFYaFdNbFpGVldzMVUwMUVWbkZYYkZaVFVXMVdSMkZGYkdGTk1sSmhWRlpvYmsxR1VsWlZhMlJhVFd4YVJsVldVa2RYVms1SVdrUk9WVlpzYnpCYVJscHZVMVp2ZWxwRk5WZGliV04zVmtaV2ExUXhhM2xXYTFaU1YwZG9XbFZ1Y0ZkaGJIQldWV3RLYkZKdGFFcFhhazVyVjJzeFdWcDZRbFZXVmtwSVYxUktTMk15VmtWVmF6VlRVbFp3Y1Zkc1ZsTlJNa1p6WVVWc1lVMHlVazlXYlRWdlRWWmtSbUZITld0TlJFWjZXbFZTVTFSc1NrZFhiWEJoVmxaS1ExcFZXbkpsUjFaRlZXczFVMUpWY0hGWGJGWlRVVzFSZUdGRmJHRk5NbEpQVlcwMWJrMUdVbFpWYTA1YVRXeGFSbFZXVWtkWFZrNUlXa1JPVlZaV2J6QlVhMVY0VWxaR2RGUnRlRk5TVlZsNlZqQldiMkp0VVhkT1ZtUnNVa1pLVDFWclZrdGhiSEJXVld0S2EwMVhhRXBYYWs1clZHeEtWazVYY0dGV1ZrcERXa1JHYjFOV2IzcGFSVFZUWW0xamQxWkdWbE5STWxaellVVnNZVTB5VWxCWmEyaHVUVVpTVmxWclpGcE5iRnBHVlZab2ExZFdUa2hhUkU1VlZsZG9WRmRVU2xkU1ZrWlpXa1pzVkZJeVVYcFdSbFpyWkRGcmVWWnJWbEpYUjJoYVZUQmthMDB4VWxaYVJrNWFUV3hhUmxWV2FHOVhWazVJV2tST1ZWWldiekJVYTFVMVVsWlNkRlJ0ZUZOU1ZWa3dWakJXYjJKdFVYZE5WV1JzVWtaS1QxVnJWbHBrTVdSR1lVYzFhMDFFUm5wYVZWSlRWR3hLUmxOcmJGWk5SMUpVVjFSS1YxSldSbGxpUm14VVVqSlJlbFpHVmxkaE1VNVlWV3RrYkZKR1NrOVZhMVV4WVd4d1ZsVnJTbXROYTFwNldsVlNVMVJzU2tkVGJYQmhWbFpLUTFwRVJuZFNNbFpGVldzMVUxSlVWbkZYYkZaVFVXMVJlR0ZGYkdGbGJFcFBWRlpvYmsxR1VsWlZhMlJhVFd4YVJsVldhR3RYVms1SVdrUk9WVlp0YUhwWFZFcFhVbGRGZW1KR2JGUlNNbEY2VmtaV2IxVXhhM2xXYTFaU1ZrVmFXbFV3Wkd0Tk1WSldXa1pPV2sxc1drWlZWbEpEVjFaT1NGcEVUbFZXVm04d1ZHdFZOVkpXVW5SVWJYaFRVbFZaTUZZd1ZtOWliVkYzVFZWc1RsWXdOWE5WYTFaSFRURmtSbUZITld0TlJFWkpWbGN4VDJKR1NrWlNXR2hZVWxkb2RWcEVRWGhUVjFaSVZHMTRVMUpWV1hwV01GWnZZbTFSZDAxVlpHeFNSa3BQVm10a1VrNVdaRVpoUnpWclRVUkdXRnBWVWxOVWJFcEdVMWhrV0ZKWGFIVmFSRUV4WXpKV1JWVnJOVk5TVlhBMFZqQldiMkp0VVhkT1NHaHNVa1pLVDFWclZrcE9SbVJHWVVjMWEwMUVSbGhhVlZKVFZHeEtSbE50Y0dGV1ZrcDFXbGQ0YjFOV2IzcGFSVFZYWW0xamQxWkdWbE5STWs1WFlVVnNZVTB5VWxGVmJUVnVUVVpTVmxWclRsQldiV2hLVjJwT2ExUnRTa2xhZWtKVlZsWktSRlJWV205VFZsWjBWRzE0VTFKVldYcFhWbVEwVGtkU1YyRkZiR0ZOTWxKUFZXcEdTMkZzY0ZaVmEwcE9Za2RvU2xkcVRtdFViRTVKWVVkd1lWWldTa05hVmxwdlUxWnZlbHBGTlZOaWJXTjNWa1JDVTFReGEzbFdhMVpTVjBkNFdsVXdaR3ROTVZKV1draGtXazFzV2taVlZ6RnpWMVpPU0ZwRVRsVldWMUpVVjFSS1YxSldSbFZVYkd4VVVqSlJlbFpHVm1GT1JUVkdUMVZXVldKVk5YTlZhMVpIVGtaa1JtRkhOV3ROUkVaSldUQmtUMkpHU2taVGJrWllVbGRvZFZwRVFYaFRSbFowVkcxNFUxSlZWWGRXTUZadlltMVJkMDFWWkd4U1JrcFJWV3RWTVdGc2NGWlZhMHBzVW0xb1NsZHFUbXRVYkU1RlVtMXdZVlpXU2tOYVYzaHZVMVp2ZWxwRk5WUlNhM0J4VjJ0V1lVNUZOVVpOVlZaU1ltdGFXbFZ1Y0ZkaGJIQldWV3RLYTAxWVFraGFWVkpEVjFaT1NGcEVUbFZXVjJjd1YxUktWMUpXUmxsaVJteFVVakpSZWxaR1ZtRk9SVFZHVDFWV1ZXSlZOWE5WYTFaSFRsWmtSbUZITld0TlJFWkpXVEJrVDJKR1NrWlRia0pZVWxkb2RWcEVRWGhUUmxaMFZHMTRVMUpWVmpaV01GWnZZbTFSZDAxVlpHeFNSa3BSVld0Vk1XRnNjRlpWYTBwc1VtMW9TbGRxVG10VWJFNUZVbTF3WVZaV1NrTlVWVnB2VTFadmVscEZOVk5OVlhCeFYxY3hORTVGTlVaTlZWWlNZVzFvV2xVd1pHdE5NVkpWVW1wU1QxSlVSa1pWVnpGUFlrWktSbFpZY0ZaaGEwcDJXVlJHYjFOV2IzcGFSbkJwVTBkamQxWkdWbE5STURsSFlVVnNZVTB5VWxCVmJUVnVUVVpTVmxWclRscE5iRnBHVld4U1QxbFdTblZhZWtKVlZsZFNVRmRVU2xkU1ZrWlpXa1pzVkZJeVVUQldSM0JEWVRGT1dGVnJaR3hTUmtwUFZXdGFZV0ZzY0ZaVmEwcHJUVmhDU0ZwVmFITlhWazVJV2tST1ZWWldiekJVYTFVMVVsWlNkRlJ0ZUZOU1ZWa3dWakJXYjJKdFVYZE5WV1JzVWtaS1QxVnJWbHBrTVdSR1lVVjBXazFzV2taVlZtaHJWMVpPU0ZsNlFsVldSVmt3Vkd0VmVGSldSblJVYlhoVFVsVlplbFl3Vm05aWJWRjNUVlprWVZOR1dsVldiVFZ1VFVaU1ZsVnJUbHBOYkZwR1ZWWlNRMkV4U25WYWVrSlZWbFpLYUZkVVNsZFNWa1paV2tkb2FWTkhZM2RXUmxaclZqRnJlVlpyVmxKWFIxSnZXV3RvYmsxR1VsWmFSMFphVFd4YVJsVldhR3RoUlRGWllVUkdXRkpYYUhWYVJFRjRVMVpPZEZSdGVGTk5WWEIzVmpCV2IySnRVWGROVldSc1VrWktUMVZyVm1GaGJIQldWV3RLYkZKdGFFcFhhazVyVkd4WmVGTnRjR0ZXVmtwRVdXdGFiMU5XYjNwYVJUVlRWakZLUzFkclZtRk9SVFZHVFZaV1VtSlZOWE5WYTFaSFRURmtSbUZITlU5U1ZFSTBXbFZTVTFSc1NrWlRiWEJoVmxaS1ExcEVSbTlUVm05NldrVTFWMlZzV25GVk1uQkhUa1UxUmsxVlZsSmlWVFZ6Vld0V1JtUXhjRVpYYWxKUFVsUkdWbFZ0TVU5aVJrcEdVbXBPV2xaRldUQmFSbHB2VTFadmVscEZOVlJTV0VKeFYyeFdVMUZ0VmtkaFJXeGhUVEpTVDFadE5XNU5SbEpXVld0a1drMXNXa1pWVm1odlYxWk9TRnBFVGxWV2JWSlVWMVJLVjFKV1JuUk5WbXhVVWpKUmVsWkdWbGRoTVU1WVZXdGtiRkpHU2s5VmExcGhZV3h3VmxWclNtdE5XRUpJV2xWb2MxZFdUa2hhUkU1VlZsWnZNRlJyVlRWU1ZsSjBWRzE0VTFKVldUQldNRlp2WW0xUmQwMVZaR3hTUmtwUFZXdFdXbVF4WkVaaFJYUmFUV3hhUmxWV2FHdFhWazVJV1hwQ1ZWWkZXVEJVYTFWNFVsWkdkRlJ0ZUZOU1ZWbDZWakJXYjJKdFVYZE5WbWhQVmpBMWMxVnJWa2RPUm1SR1lVYzFhMDFFUmtoWlZXUXdWMVpPU0ZwRVRsVldWbTh3Vkd0VmVGSldSbk5WYTNoVFltMWpkMVpHV2xOUk1XdDVWbXRXVWxkSFVscFZNR1JyVFRGU1ZsZHFVazlTVkVaR1ZWZHpOVlp0U2tsYWVrSlZWbGRTVUZkVVNsZFNWa1paV2tac1ZGSXlVWHBXUmxaaFRrVTFSazFWVmxKaWJrSmFWVEJrYjJJeFVYaFhhbEpQVWxSR1JsVlhNVTlpUmtwR1VtcE9XRkpYYUhWYVJFRjRVakpXUlZWck5WZE5TRUp3VmtaV1UyVnJOVlpOU0d4T1ZqQTFjMVZxUmxkT1ZtUkdZVWMxVDFaVVZraGFWVkpUVlVaS1JsTnRjR0ZXVjFKWFdsWmFiMU5XY0RaV2F6bFRZbTFqZDFaRVFsTlJNV3Q1Vm10b1YxZEhlRnBWTUdScVRWWlNjbGRxVWs5U1ZHeEdWVmN4VDJKR1NYaFdhbFpZVWxkb2RWUnNWVEZTTWxaRlZXeENVMUpWY0hGWGJGWnJWbTFXVjJGRmJHRmxiRnBRVlcwMWJrMUdVWGRWYTA1YVRXeGFTVlpzYUhOWFZrNUlXWHBHVldFeGJ6QlVhMVUxVWxaR2RGUnRlRk5OVmxreFZqQldiMkpyTlZaT1ZXUnNVa1pLVVZWclZrdGhiSEJXV2taYWJGWnRhRXBYYm5CWFZERktkVnA2UWxWTlJrcEVWMVJLVjFOR1dsbGlSbXhVVWpKTmVGWkhkR0ZPUlRWR1QxVldVbUpWTlhOVmFrWlhUbFprUm1GSE5VOVdWRlpJV2xWU1UxVkdTa1pUYlhCaFZsZFNWMXBXV205VFZuQTJWbXM1VTJKdFkzZFdSRUpUVVRGcmVWWnJhRmRYUjNoYVZUQmthazFXVW5KWGFsSlBVbFJzUmxWWE1VOWlSa2w0Vm1wV1dGSlhhSFZVYkZVeFVqSldSVlZzUWxOU1ZYQnhWMnhXYTFadFZsZGhSV3hoWld4YVVGVnROVzVOUmxGM1ZXdE9XazFzV2tsV2JHaHpWMVpPU0ZsNlJsVmhNVzh3Vkd0Vk5WSldSblJVYlhoVFRWWlpNVll3Vm05aWF6VldUbFZrYkZKR1NsRlZhMVpMWVd4d1ZscEdXbXhXYldoS1YyNXdWMVF4U25WYWVrSlZUVVpLUkZkVVNsZFRSbHBaWWtac1ZGSXlUWGhXUjNSaFRrVTFSazlWVmxKaVZUVnpWV3BHVjA1V1pFWmhSelZQVmxSV1NGcFZVbE5WUmtwR1UyMXdZVlpYVWxkYVZscHZVMVp3Tmxack9WTmliV04zVmtSQ1UxRXhhM2xXYTJoWFYwZDRXbFV3WkdwTlZsSnlWMnBTVDFKVWJFWlZWekZQWWtaSmVGWnFWbGhTVjJoMVZHeFZNVkl5VmtWVmJFSlRVbFZ3Y1Zkc1ZtdFdiVlpYWVVWc1lXVnNXbEJWYlRWdVRVWlJkMVZyVGxwTmJGcEpWbXhvYzFkV1RraFpla1pWWVRGdk1GUnJWVFZTVmtaMFZHMTRVMDFXV1RGV01GWnZZbXMxVms1VlpHeFNSa3BSVld0V1MyRnNjRlphUmxwc1ZtMW9TbGR1Y0ZkVU1VcDFXbnBDVlUxR1NrUlhWRXBYVTBaYVdXSkdiRlJTTWsxNFZrZDBZVTVGTlVaUFZWWlNZbFUxYzFWcVJsZE9WbVJHWVVjMVQxWlVWa2hhVlZKVFZVWktSbE50Y0dGV1YxSlhXbFphYjFOV2NEWldhemxUWW0xamQxWkVRbE5STVd0NVZtdG9WMWRIZUZwVk1HUnFUVlpTY2xkcVVrOVNWR3hHVlZjeFQySkdTWGhXYWxaWVVsZG9kVlJzVlRGU01sWkZWV3hDVTFKVmNIRlhiRlpyVm0xV1YyRkZiR0ZsYkZwUVZXMDFiazFHVVhkVmEwNWFUV3hhU1Zac2FITlhWazVJV1hwR1ZXRXhiekJVYTFVMVVsWkdkRlJ0ZUZOTlZsa3hWakJXYjJKck5WWk9WV1JzVWtaS1VWVnJWa3RoYkhCV1drWmFiRlp0YUVwWGJuQlhWREZLZFZwNlFsVk5Sa3BFVjFSS1YxTkdXbGxpUm14VVVqSk5lRlpIZEdGT1JUVkdUMVZXVW1KVk5YTlZha1pYVGxaa1JtRkhOVTlXVkZaSVdsVlNVMVZHU2taVGJYQmhWbGRTVjFwV1dtOVRWbkEyVm1zNVUySnRZM2RXUkVKVFVURnJlVlpyYUZkWFIzaGFWVEJrYWsxV1VuSlhhbEpQVWxSc1JsVlhNVTlpUmtsNFZtcFdXRkpYYUhWVWJGVXhVakpXUlZWc1FsTlNWWEJ4VjJ4V2ExWnRWbGRoUld4aFpXeGFVRlZ0Tlc1TlJsRjNWV3RPV2sxc1drbFdiR2h6VjFaT1NGbDZSbFZoTVc4d1ZHdFZOVkpXUm5SVWJYaFRUVlpaTVZZd1ZtOWlhelZXVGxWa2JGSkdTbEZWYTFaTFlXeHdWbHBHV214V2JXaEtWMjV3VjFReFNuVmFla0pWVFVaS1JGZFVTbGRUUmxwWllrWnNWRkl5VFhoV1IzUmhUa1UxUms5VlZsSmlWVFZ6VldwR1YwNVdaRVpoUnpWUFZsUldTRnBWVWxOVlJrcEdVMjF3WVZaWFVsZGFWbHB2VTFad05sWnJPVk5pYldOM1ZrUkNVMUV4YTNsV2EyaFhWMGQ0V2xVd1pHcE5WbEp5VjJwU1QxSlViRVpWVnpGUFlrWkplRlpxVmxoU1YyaDFWR3hWTVZJeVZrVlZiRUpUVWxWd2NWZHNWbXRXYlZaWFlVVnNZV1ZzV2xCVmJUVnVUVVpSZDFWclRscE5iRnBKVm14b2MxZFdUa2haZWtaVllURnZNRlJyVlRWU1ZrWjBWRzE0VTAxV1dURldNRlp2WW1zMVZrNVZaR3hTUmtwUlZXdFdTMkZzY0ZaYVJscHNWbTFvU2xkdWNGZFVNVXAxV25wQ1ZVMUdTa1JYVkVwWFUwWmFXV0pHYkZSU01rMTRWa2QwWVU1Rk5VWlBWVlpTWWxSV1dsVXdaRzlqTVdSVlVtdGtXazFzV2tsVk1WSlRWMVpPU0ZwRVVsaGlSbTh3Vkd0Vk5WSldXblJVYlhoVFRWWndkMVl3Vm05aU1rWldUVlpXVUZkSVFsQlZiVFZ1VFVaU1ZsVnJUbHBOYkZwR1ZWWm9hMWRXVGtoYVJFNVZWbFp2TUZSclZYaFhSazUwVTJzMVUxTkZNSGhXUmxwcVpVWnJlVlpyYUZkWFIzaGFWVEJrYWsxR1VsWlhhbEpQVW0xNFZsVXhaR3RYVms1SVdrUlNXRll6YURaYVJFRTFUbTFGZW1OSGJGZGlSbTh5VmpKNGIxTXlVbGRpUm1oT1ZqTm9TMVZzV25kaU1XUlZVMnhrYUZZd2JEVlVNV2hMVjFaT1NGcEVVbGhXTTJnMldrUkJOVTV0UlhwaFIyeFdUVVZWZVZZd1ZtOWliVlpIWWtoT2FrMHlVbEZhVnpFd1RsWnNjMVJyVG14aVIyaEtWMnBPYjFWR1duVmFla0pWVmxaS1JGZFVTbGRTVmtaWldrWnNWRkl5VVhwV1JsWnJZakF4U0ZWcmJGSmlia0pSV1ZaU2IwMXNjRVZVYlhST1RVaG9NRll5TVc5WGF6RnpWMjVDV21GcmF6RlpNblEwWkVaU2RWZHRiRlpsYlhjeVZqQldiMkp0VVhoalJtUnNVa1pLVDFWclZrdGhiSEJXVld0S2EwMVhhRXBYYWs1clZHeEtjMU51WkdGU1YxRXdXV3RXYzJOVk5VaFBWVEZvVm5wb01sVjZSbE5OTWxKMFVteGtiRkpHU2s5VmExWmhZV3h3VmxWclNtdE5WMmhLVjJwT2ExUnNTblZhZWtKVlZsWktSRnBYZUc5VFJUVllWRzE0VTFKVldYcFdNRlp2WW0xUmQwMVZaR3hTUmtwUFZXdFdTazVHVGxaV2JVWm9VbTEwTlZadE1YTmhWVEZ4WWtoc1dtVnJXVEJVYTFWNFUwWmtkRlJ0ZUZOU1ZWbDZWakJXYjJKdFVYZE5WV1JzVWtaS1QxVnJWa3ROTVd0NVRVUldhVll3V2xsYVZXUTBWRmRXV0ZwRVJsUk5iVGd3V1RCV2MyTkdSblZqUlhoVFltMWpkMVpHVmxOUk1XdDVWbXRXVWxkSFVscFZNR1JyVFRGU1ZsZHFVbXRXYldoS1YycE9iMWR0U2tsVWFrNVZUVE5DZVZwVlpFdFdNbFpGVlcxR1YxSllRbkZYYkZaVFltMVJlR0ZGYkdoU01taFBXVlpXUzJGc2NGWlZhMlJvVm0xUk1sVldVbXRWUmxwR1RsUkNWMUo2UmtoYVJWcHpWa1pHZEZSdGVGTlNWbkIzVm1wT2QxRnJOSGRQVmxaVFlteEtVbGxyYUc1TlJsSlhXa1YwV21GNlJrWlpNM0JYVkdzeGNWRnROVnBsYTFsNldXMTRiMU5XYjNwYVJUVlRZbTFqZDFaR1ZsTlJNV3Q1Vm10V1VsZEhVbHBWTUdSclRrWmtXR1ZJY0d0TlJHc3lXVlJPYjJGV1duVmFla0pZWWtaS1RGZFVTbGRTVm05NldrWnNWRkl5YUhaV1JtUTBUa1UxUmsxV2FGUmlWWEJQVld0b1RrMVdVbFZUV0dSaFRWVTFXVlpXWkd0VGJFVjNVMjF3WVZaV1NraFpWbHByVG14R1ZWcEdRbGRTVm05M1ZsVmtORTVGTlVaTlZtaFVZbFZ3VDFWcmFFNU5WbEpWVTFoa1lVMXJNVFJhVlZKVFZHeEtSbGR0Y0dGV1ZrcERXa1JHYjFOV2IzcGFSVFZUWW0xamQxWkdWbE5STVd0NVUyNVdWV0pWTlhOVmExWmhaRVprUm1GSE5XdE5SRVpJV2xWU1UxUnNTa1pUYlhCaFZsWktRMXBFUm05VFJUVllWRzE0VTFKV2NIZFdhazUzVVdzMGQwOVdWbUZUUmtwTlZXMDFiazFHVWxkYVJYUmFZWHBHUmxremNGZFViRm8yVW1zeFdHSkhUalJaVmxwelYwZFdTVkZzYkZSU01sRXdWakZrTkdWdFVYZFBWRnBvWldzMWNGWlVTalJPYkU0MlVtcFNUMUpVUmtaVlZ6RlBZa1pLUmxKcVRsaFNWMmgxV2tSQmVGSXlWa1ZWYXpWWFRVaENjRlpHVmxObGF6VldUa2hzVGxKNmJGcFZNR1JyVGtaa1dHVkljR3ROUkdzeVdWUk9iMkZXVlhkWGJYQmhWbFpLU0ZsV1dtdE9iRVpWV2taQ1YxSXhTWGRWZWtaUFVURlNTRk5ZYkU5V00yaHZWRlJCTVdReFRsWmFSWFJwVWpBMU1GUldaRzloYXpGeVYyNXdXRlp0VW5aYVYzTjRZekpXUlZWck5WTlNWWEJ4VjJ4V1UxRnRVWGhoUld4aFRUSlNUMVZ0Tlc1TlJsSlhXa1YwV21GNlJrWlpNM0JYVkRBeGNWRnVXbGhTVjJoMVdsVmFjMk15VFhwYVJrSnNZbGhSTUZkWGVFOVNNV3Q1Vm10V1UySlhlRmxhVjNSR1RURlJlRlZ0ZEd0U1dGSlZWVmQ0WVdGck1YTlhhbFphWWxSR1NGcEZXbmRXUmtaeFVXMW9WMDFWY0haWFZtaHpVVEpGZVZKc1VsSmhhMHBvVm01d1JtVkdiRlZUYTJSclZsaFNTRnBWVWxOVWJGcEdZMGR3WVZaV1NrTmFSRVp2VTFadmVscEZOVk5pYldOM1ZrWldVMUV4VlhoaFJXeFVZbFUxYzFWclZrZE5NV1JHWVVjMWEwMUVSa2hhVlZKVFZHeEtSbE5zVWxoU1YyaDFXa1JHZDFZeVZrVlZhelZUVWxWd2NWZHNWbE5SYlZGNFlVVnNZVTB5VWs5VmJYUjNZV3h3VmxWclRtbFdiV2hLVjJwT2ExUnNTblZhZWtKVlZsWktSRmRVU2xkU1ZrWlpXa1phYVZOSFkzZFdSbFpUWVRGcmVWWnJWbEpYUjFKYVZUQmthMDB4VWxaWGFsSlBVbFJHUmxWWGVFOVhWazVJV2tST1ZVMUdiekJVYTFWNFVsWkdkRlJ0ZUZOU1ZWbDZWakJXYjJKdFVYZE5WV1JVWWxVMWMxVnJWbFpsVm1SR1lVYzFhMDFFUmtoYVZWSlRWR3hLUmxOdGNHRldWa3BEV2tSS1UxSXlWa1ZWYXpWVFVqSm9jVmRzVmxOUmJWRjRZVVZzWVUweVVrOVZiVFZ1VFVaU1ZsVnJUbXhXYmtKYVZXMXdSMWxXWkVaT1NHUmFaV3MxVkZkVVNsZFNWa1paWTBac1ZGSXlVWHBXUmxaaFRrVTFSazFWVmxKaVZUVnpWV3RXUjAweFpIRlRiR1JPVWpGS1NGcFZVbE5VYkVwSFUyMXdZVlpXU2tOYVJFWnZVMVp2ZWxwRk5WTmliV04zVmtaV1UxRXdNVWRqUm14b1VrVktjbFZ0Tlc1TlJsSldWV3QwV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVm04d1ZHdFZlRkpXUm5WaVIwWllVbXR3Y1Zkc1ZsTlJhekZ6WVVWc1lVMHlVazlWYlRWdVRVWlNWbFZyVGxwTmJGcEdWVlpvYTJGck1YTlhiVGxhVFdwR1VGbHFTbE5TTWxaRlZXczFVMUpzY0hGWGJGWlRVVzFSZUdGRmJHRk5NbEpQVlcwMWJrMUdVbFpWYTA1cFlsVTFNRlF4VWtkaGJFNUhVMjF3WVZaV1NrTlVWbHB2VTFadmVscEZOVk5pYldOM1ZrWldVMUV4YTNsV2ExWlNWMGRTY1ZSVVJrdE9WbXhYWVVWT1ZrMVhhRXBYYWs1dlZHeGFkVnA2UWxWV1ZrcEVWMVJLVjFKV1JsbGFSbXhVVWpKUmVsWkdWbTlWTVd0NVUyNU9iRkpHU2s5VmExWkxZV3h3VmxWclNtdE5WMmhLVjJwT2ExUnNTWGhYVkVKWVZrVndXRnBFU2xOVFIwcEpWMjFzYVdGNlZsVldNRlp2WW0xUmQwMVdaR3hTUmtwUFZXdFdTMkZzY0ZaVmEwcHJUVmRvU2xkcVRtdFViRTVIVTIxd1lWWldTa05VVlZwdlUxWnZlbHBGTlZOaWJXTjNWa1pXVTFFeGEzbFdhMVpTVjBkU2FGWXdaRzlrTVhCR1lVWk9XazFzV2taVlZ6RTBWMVpPU0ZwRVRsVldWbTh3Vkd0VmVGSldSblJVYlhoVFVsVlplbFpXV205Vk1ERklWRzVTYVZJeWVISldNRnBMWXpGV2MyRkZkR3hXTUd3MlZURmpOVmRXVGtoYVJFNVZZa1p2TUZSclZYaFNWa1owVkcxNFUxSlZXWHBXTUZadlltMVJkMDFWYkZaaVZUVnpWV3RXUjA1R1pFWmhSelZyVFVSR1NGcFZVbE5VYkVwR1UyMXdZVlpXU2tOYVJFcFRWMVpXZEZSdGVGTlNWVmt5VmpCV2IySnRVWGROVldSc1VrWktUMVZyVmt0aGJIQldWV3RLYTAxc1NscFZNalZQWVRGS2RWcDZRbFZXVmtwSVYxUktWMUpXUmxsYVJteFVVakpSZWxaR1ZtRk9SVFZHVFZWV1VtSnRlSEpWYlRWdVRVWlNWbFZzVGxwTmJGcEdWVlpvYTFkV1RraGFSRTVWVmxadk1GUnJWWGhTVmtaMVZteHdWMlZyV25wV2JHUTBUa1UxUmsxV1ZtRlNNRFZ6Vld0V1IwMHhaRVpoUnpWclRVUkdTRnBWVWxOVWJFcEdVbTVhV0ZKWGFIVmFSRUY0VWpKV1JWVnJOVk5TVlhCeFYyeFdVMUZ0VVhoaFJXeGhUVEpTVDFWVVNtOWhiSEJXVld0S2EwMVhhRXBYYWs1clZHeEtkVnA2UWxWV1ZrcEVWMVJLVjFKV1JsbGFSM0JPVjBkamQxWkdWbE5UTVd0NVZtdFdVbGRIVWxwVk1HUnJUVEZTVmxkcVVrOVNWRVpHVlZjeE1GbFZNVlpqUjNCaFZsWktSMVJVUm05VFZtOTZXa1UxVTJKdFkzZFdSbFpUVVRGcmVWWnJWbEpYUjFKUldXdG9iazFHVWxaVmEwNWFUV3hhUmxWV2FHdFhWazVJV2tST1ZWWlhhRTlaTVZwdlUxWnZlbHBGTlZOaWJXTjNWa1pXVTFFeGEzbFdhMVpTVjBkU1dsVXdaR3ROTVZKV1YycFNUMUpVUmtaVmJURlBZVzFLU1ZwNlFsVldWa3BJVjFSS1YxSldSbFZTYkd4VVVqSlJlbFpHV21GT1JUVkdUVlZXVjJKVk5YTlZhMVpIVFRGa1JtRkZkRnBOYkZwR1ZWWm9iMWRXVGtoYVJFNVZWa1ZaTUZSclZYaFNWa3AwVkcxNFUxSlZjSGhXTUZadlltMVJkMDFXWkd4VFJscGFWVEJrYTAweFVsZFhhbEpQVWxSR1ZsVXlNVTlpUmtwR1VtcFNWR0V4YnpCVWExVjRVbFpLZEZSdGVGTlNWbkIzVmpCV2IySnRVWGROVm1Sc1VrVktXbFV3Wkd0Tk1WSlhWMnBTYkZadGFFcFhhazVyVkd4YWRXRkVSbGhTVjJoMVdrUkJlRll5VmtWVmF6VlRUVWhDY1Zkc1ZsTlJiVlpYWVVWc1lVMHlhRTlVVm1odVRVWlNWbFZyWkZwTmJGcEdWVlpTUjFkV1RraGFSRTVWVm14dk1GcEdXbTlUVm05NldrVTFWMkp0WnpGV01GWnZZbTFSZDAxV1pHeFNSa3BQVld0YVlXRnNjRlpWYTBwc1VtMW9TVlJzWkU5aVJrcEdVbXBTV0ZaRldUQlVhMVY0VWxaR2RGUnRlRk5TVlZsNlZqQldiMkp0VVhkTlZXUnNVa1pLVDFWclZrdGhiSEJXVld0S1RsWnRhRXBYYWs1clZHeEtkVnA2UWxWV1ZrcEVWMVJLVjFKV1JsbGFSbXhVVWpKUmVsWkhlR0ZPUlRWR1RWVldVbUpWTlhOVmExWkhUVEZrUm1GSE5XdE5SRVpIVmtjeFQySkdTa1pTYWs1WVVsZG9kVnBFUVhoU01sWkZWV3MxVTFKVmJ6SldNRlp2WW0xUmQwNVlUbXhTUmtwUFZXdFdZV0ZzY0ZaVmEwcHJUVmRvU2xkcVRtdFViRTVIVTIxd1lWWldTa05hUkVadlUxWnZlbHBGTlZOTk1FcHhWMnhXVTFGdFZrZGhSV3hoVFRKU1QxVnFSa3RoYkhCV1ZXdEtiRkp0YUVwWGFrNXJWR3hLZFZwNlFsVk5Sa3BRVjFSS1YxSldSbGxoUm14VVVqSlJlbFpHVm1GT1JUVkdUVlZXVTJGclNscFZNR1JyVFRGU1dHVkVVazlTVkVaR1ZWZDBiMVpHU1hoVGJYQmhWbFpLUTFwV1dtOVRWbTk2V2tVMVUxWXhTa3RYYTFaaFRrVTFSazFWVmxWaVZUVnpWV3RXUjAweGJGaGxSRkpQVWxSR1JsWlhNVTlpUmtwR1VtcE9XR0V4YnpCVWExVjRVbFpTZEZSdGVGTlNWVmw2VmpCV2IySnJOVVpOU0doc1VrWktUMVZyVm1GaGJIQldWV3RLYTAxWGFFcFhhazVyVkd4a1NHVkhjR0ZXVmtwNVdsWmFiMU5XYjNwYVJUVlVVbXR3Y1Zkc1ZsTlJhekZYWVVWc1lVMHlVazlWYWtaTFlXeHdWbFZyU2s1U2JXaEtWMnBPYTFSc1NuVmFla0pWVFVaS1VGZFVTbGRTVmtaWllVWnNWRkl5VVhwV1JsWnVaVVpyZVZaclZsSlhSMUphVlRCa2EwMHhVbFphUms1YVRXeGFSbFZXVWtkWFZrNUlXa1JPVlZaWFp6QlhWRXBYVWxaR1dWcEdiRlJTTWxGNlZrWldZVTVGTlVaTlZsWmhVa2Q0V2xVd1pHdE5NVkpYVjJwU1QxSlVSa1pWVjNCRFYxWk9TRnBFVGxWaVdHY3dWR3RWZUZKV1JuVlNiR3hVVWpKUmVsWkhjRWRPUlRWR1RWVldVbUZ0YUZwVk1HUnJUVEZTVjFkcVVrOVNWRVpHVlZjeFQySkdTa2hhUkZwWVVsZG9kVnBFUVhoV01sWkZWV3MxVTFKVmNEUldNRlp2WW0xUmQwOVZaR3hTUmtwUFZXdFdTazVXWkVaaFJ6VnJUVVJHZWxwVlVsTlViRXBHVTFoa1dGSlhhRlJYVkVwWFVsWkdXVnBIYUdsVFIyZDRWakJXYjJKdFVYZE5WV2hXWWxVMWMxVnJWa1psVm1SR1lVYzFhMDFFUmtwYVZXUlBZa1pLUmxKcVZsaFNWMmgxV2tSQmVGSXlWa1ZWYkVKVFVsUldjVmRzVmxOUmJWWlhZVVZzWVUweVVrOVZhazVEWVd4d1ZsVnJUbWhXYldoS1YycE9hMVJzU1hoVGJYQmhWbFpLUTFSVVJtOVRWbTk2V2tVMVUySnRZM2RXUkVKVFZERnJlVlpyVmxKWFIyaGFWVEJrYTAweFVsWmFTR1JhVFd4YVJsVlhNWGRYVms1SVdrUk9WVlpYVWxSWFZFcFhVbFpHVlZWc2JGUlNNbEY2VmtaV1lVNUZOVVpQVlZaVllsVTFjMVZyVmtkT1JtUkdZVWMxYTAxRVJrcFVWbVJQWWtaS1JsSnFXbGhTVjJoMVdrUkJlRk5XVm5SVWJYUlRZbTFqZDFaR1ZsTlJNazVYWVVWb1QxWXdOWE5WYTFaSFRURmtjbGRxVWs1U2JXaEtWMnBPYTFSc1RrbGhSM0JoVmxaS1ExcFdXbTlUVm05NldrVTFVMkp0WTNkV1JFSlRWREZyZVZaclZsSlhSM2hhVlRCa2EwMHhVbFphU0dSYVRXeGFSbFZYTVhOWFZrNUlXa1JPVlZaWFVsUlhWRXBYVWxaR1ZWUnNiRlJTTWxGNlZrWldZVTVGTlVaUFZWWlZZbFUxYzFWclZrZE9SbVJHWVVjMWEwMUVSa3BVVm1SUFlrWktSbEpZWkZoU1YyaDFXa1JCZUZOR1ZuUlViV3hwVTBkamQxWkdWbE5STURsSFlVVnNZVTB5VWs5VVZtaHVUVVpTVmxWclRscE5iRnBHVld4U1QxVXdNVWhoU0VwWVVsZG9kVnBFUm5Oak1sWkZWV3MxVTFKVmF6QldNRlp2WW0xUmQwNVZaR3hTUmtwUFZXdFdTMkZzY0ZaVmExcE9UVmhDU0ZwVlVsTlViRWwzVGxkd1lWWldTa05hUkVadlUxWnZlbUZGT1U1U01VcExWMnRXWVU1Rk5VWk5WVlpYWWxVMWMxVnJWa2ROTVdSeVYycFNiRlp0YUVwWGFrNXJWR3hLZFZwNlFsVk5Sa3BRVjFSS1YxSldSbGxoUm14VVVqSlJlbFpHVm1GT1JUVkdUVlZXVTJGclNscFZNRlozWVd4d1ZsVnJTbXROVjJoS1YyNXdVMVJyTVZsYWVrSlZWbFpLUkZkVVNsZFNWa1paV2tac1ZGSXlVWHBXUmxwaFlUSlNWMVJzWkd4U1JrcFBWV3RXUzJGc2NGWlZhMHBPVWpGS1NGcFZVbE5VYkVwSFkwZHdZVlpXU2tOYVJFcEhZekpXUlZWck5WTk5WbkJ4VjJ4V1UxRnRVWGxTYms1c1VrWktUMVZxUm5kaGJIQldWV3RLYTAxclZqUmFWV2hYVjFaT1NGcEVUbFZXVjJoTVYxUktWMU5HVm5SaVJteFVVakpSZWxaR1ZtRk9SVFZHVFZWV1UySlZOWE5WYTFaSFRrWmtSbUZITld0TlJFWlpWbGN4VDJKR1NrWlRiazVZVWxkb2RWcEVRWGhTYkhCR1lrZDBVMkp0WTNkV1JscFRVVEZyZVZaclZsSlhSMUphVlRCa2FrMUdVbFZTYWxKUFVsUkdSbFZYTVU5aVJrcEdVbXBPV0ZKWGFIVmFSRUY0VjBVMVdGUnJkRTVYUjJOM1ZrWldVMUV4YTNsV2ExWlNWa1ZLY2xWdE5XNU5SbEpYVld0a1drMXNXa1pWVm1ocllVVXhXV0ZFUmxoU1YyaDFXa1JCZUZOV1RuUlViWGhUVWxWWk1GWXdWbTlpYlZGM1RWWmtiRkpHU2s5VmExWmhZV3h3VmxWclNteFNiV2hLVjJwT2ExUnNXWGhUYlhCaFZsWktSRmxzV205VFZtOTZXa1UxVTFZeFNrdFhhMVpoVGtVMVJrMVZWbGRpVlRWelZXdFdSMDB4WkhKWGFsSnNWbTFvU2xkcVRtdFViRXAxV25wQ1ZVMUdTbEJYVkVwWFVsWkdXV0ZHYkZSU01sRjZWa1pXWVU1Rk5VWk5WVlpUWVd0S1dsVXdWbmRoYkhCV1ZXdEthMDFYYUVwWGJuQlRWR3N4V1ZwNlFsVldWa3BFVjFSS1YxSldSbGxhUm14VVVqSlJlbFpHV21wTlZtdDVWbXRXVWxkSGFGcFZNR1JyVFRGU1ZsZHRPV2hOVjJoS1YycE9hMVJzU25WYWVrSlZWbFpLUkZaclZqQlNNbFpGVldzMVYxSlZjSEZYYkZaVFVXMVJlR0ZGYkdGTk1sSlBWVzAxYmsxR1VsWlZhMDVWVFZaYWVscFZVbE5VYkVsM1RsZHdZVlpXU2tOYVJFWnZVMVp2ZWxwRk5WTmliV04zVmtaV1UxRXlWbk5oUld4b1VqSm9VVlp0Tlc1TlJsSldWV3RPV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVm04d1ZHdFZlRmRHVG5SVGF6VlRVMFV3ZUZaR1VrcGxSbXQ1Vm10b1YxZEhlRnBWTUdScVRWWlNjbGRxVWs5U1ZHeEdWVmN4VDJKR1NYaFdhbFpZVWxkb2RWUnNWVEZTTWxaRlZXeENVMUpWY0hGWGJGWnJWbTFXVjJGRmJHRmxiRnBRVlcwMWJrMUdVWGRWYTA1YVRXeGFTVlpzYUhOWFZrNUlXWHBHVldFeGJ6QlVhMVUxVWxaR2RGUnRlRk5OVmxreFZqQldiMkpyTlZaT1ZXUnNVa1pLVVZWclZrdGhiSEJXV2taYWJGWnRhRXBYYm5CWFZERktkVnA2UWxWTlJrcEVWMVJLVjFOR1dsbGlSbXhVVWpKTmVGWkhkR0ZPUlRWR1QxVldVbUpWTlhOVmFrWlhUbFprUm1GSE5VOVdWRlpJV2xWU1UxVkdTa1pUYlhCaFZsZFNWMXBXV205VFZuQTJWbXM1VTJKdFkzZFdSRUpUVVRGcmVWWnJhRmRYUjNoYVZUQmthazFXVW5KWGFsSlBVbFJzUmxWWE1VOWlSa2w0Vm1wV1dGSlhhSFZVYkZVeFVqSldSVlZzUWxOU1ZYQnhWMnhXYTFadFZsZGhSV3hoWld4YVVGVnROVzVOUmxGM1ZXdE9XazFzV2tsV2JHaHpWMVpPU0ZsNlJsVmhNVzh3Vkd0Vk5WSldSblJVYlhoVFRWWlpNVll3Vm05aWF6VldUbFZrYkZKR1NsRlZhMVpMWVd4d1ZscEdXbXhXYldoS1YyNXdWMVF4U25WYWVrSlZUVVpLUkZkVVNsZFRSbHBaWWtac1ZGSXlUWGhXUjNSaFRrVTFSazlWVmxKaVZUVnpWV3BHVjA1V1pFWmhSelZQVmxSV1NGcFZVbE5WUmtwR1UyMXdZVlpYVWxkYVZscHZVMVp3Tmxack9WTmliV04zVmtSQ1UxRXhhM2xXYTJoWFYwZDRXbFV3WkdwTlZsSnlWMnBTVDFKVWJFWlZWekZQWWtaSmVGWnFWbGhTVjJoMVZHeFZNVkl5VmtWVmJFSlRVbFZ3Y1Zkc1ZtdFdiVlpYWVVWc1lXVnNXbEJWYlRWdVRVWlJkMVZyVGxwTmJGcEpWbXhvYzFkV1RraFpla1pWWVRGdk1GUnJWVFZTVmtaMFZHMTRVMDFXV1RGV01GWnZZbXMxVms1VlpHeFNSa3BSVld0V1MyRnNjRlphUmxwc1ZtMW9TbGR1Y0ZkVU1VcDFXbnBDVlUxR1NrUlhWRXBYVTBaYVdXSkdiRlJTTWsxNFZrZDBZVTVGTlVaUFZWWlNZbFUxYzFWcVJsZE9WbVJHWVVjMVQxWlVWa2hhVlZKVFZVWktSbE50Y0dGV1YxSlhXbFphYjFOV2NEWldhemxUWW0xamQxWkVRbE5STVd0NVZtdG9WMWRIZUZwVk1HUnFUVlpTY2xkcVVrOVNWR3hHVlZjeFQySkdTWGhXYWxaWVVsZG9kVlJzVlRGU01sWkZWV3hDVTFKVmNIRlhiRlpyVm0xV1YyRkZiR0ZsYkZwUVZXMDFiazFHVVhkVmEwNWFUV3hhU1Zac2FITlhWazVJV1hwR1ZXRXhiekJVYTFVMVVsWkdkRlJ0ZUZOTlZsa3hWakJXYjJKck5WWk9WV1JzVWtaS1VWVnJWa3RoYkhCV1drWmFiRlp0YUVwWGJuQlhWREZLZFZwNlFsVk5Sa3BFVjFSS1YxTkdXbGxpUm14VVVqSk5lRlpIZEdGT1JUVkdUMVZXVW1KVk5YTlZha1pYVGxaa1JtRkhOVTlXVkZaSVdsVlNVMVZHU2taVGJYQmhWbGRTVjFwV1dtOVRWbkEyVm1zNVUySnRZM2RXUkVKVFVURnJlVlpyYUZkWFIzaGFWVEJrYWsxV1VuSlhhbEpQVWxSc1JsVlhNVTlpUmtsNFZtcFdXRkpYYUhWVWJGVXhVakpXUlZWc1FsTlNWWEJ4VjJ4V2ExWnRWbGRoUld4aFpXeGFVRlZ0Tlc1TlJsRjNWV3RPV2sxc1drbFdiR2h6VjFaT1NGbDZSbFZoTVc4d1ZHdFZOVkpXUm5SVWJYaFRUVlpaTVZZd1ZtOWlhelZXVGxWa2JGSkdTbEZWYTFaTFlXeHdWbHBHV214V2JXaEtWMjV3VjFReFNuVmFla0pWVFVaS1JGZFVTbGRUUmxwWllrWnNWRkl5VFhoV1IzUmhUa1UxUms5VlZsSmlWVFZ6VldwR1YwNVdaRVpoUnpWUFZsUldTRnBWVWxOVlJrcEdVMjF3WVZaWFVsZGFWbHB2VTFad05sWnJPVk5pYldOM1ZrUkNVMUV4YTNsV2EyaFhWMGQ0V2xVd1pHcE5WbEp5VjJwU1QxSlViRVpWVnpGUFlrWkplRlpxVmxoU1YyaDFWR3hWTVZJeVZrVlZiRUpUVWxWd2NWZHNWbXRXYlZaWFlVVnNZV1ZzV2xCVmJUVnVUVVpSZDFWclRscE5iRnBKVm14b2MxZFdUa2haZWtaVllURnZNRlJyVlRWU1ZrWjBWRzE0VTAxV1dURldNRlp2WW1zMVZrNVZaR3hTUmtwUlZXdFdTMkZzY0ZaYVJscHNWbTFvU2xkdWNGZFVNVXAxV25wQ1ZVMUdTa1JYVkVwWFUwWmFXV0pHYkZSU01rMTRWa2QwWVU1Rk5VWlBWVlpTWWxVMWMxVnFSbGRPVm1SR1lVYzFUMVpVVmtoYVZWSlRWVVpLUmxOdGNHRldWMUpYV2xaYWIxTldjRFpXYXpsVFltMWpkMVpFUWxOUk1rcHpZVVZzYUZJemFHRlVWbFpoWVd4d1ZscEZjRTlTYldoS1YycE9iMWxXV25WYWVrSlZUVVpLV0ZkVVNsZFRSbHAwWWtac1ZGSXlhSGRXUmxwU1RsZFdjbVZJVG14U1JrcFBWV3RXUzJGc2NGWlZhMHByVFZkb1NsZHFUbXRVYkVwMVducENWVlp0VWt4WFYzTjRVbGRPTmxack5WZGxhMXB4VjJ4V2ExWnRWbGRoUld4aFpXeEtUMVZ0Tlc1TlJtUlhWV3R3WVUxWGFFcFhhazV2VjIxS1NWUnFUbFZOTTBKNVdsY3hTMVp0U2toa1JYQlRWbTVDZGxZeFVrdFdNa1pZVTFoc1VGZEZjRXRWYlRWdVRVWlNWMXBGZEZwaGVrWkdXVE53VjFSc1dqWlJWRXBZVWxkb2RWcFZXbk5qTWsxNldrWkNiR0pZVVRGWFYzaFBVVEpXYzJGRmJHRk5NbWhSVm0wMWJrMUdVbFpWYTA1YVRXeGFSbFZXYUd0WFZrNUlXa1JPVlZaWFVuWlVWV1JUVTFaR2RXTkdRbWhXUjJkNVYydFNUMkV3TUhkbFNGSllZbGRvWVZSWGVHRmpSbXh4VTFSV2FtRXphREJXUnpWaFlWWldObUpFV2xoU1YyaDFXa1JHZDFZeVZrVlZhelZUVWxWd2NWZHNWbE5SYlZGNFlVVnNZVTB5VWs5VmJYaExaREZ3UmxwRVVtbFNWM2g0Vkd0ak5WUlhSbGhQU0ZwVVRWWkplbHBITVVkV01sWkZWV3MxVTFKV2NIRlhiRlpUVVcxUmVHRkZiR0ZOTWxKUFZXMDFiazFHVWxaVmEwNXNZa2RvU1ZSc1pFOWlSa3BHVW1wT1dGSlhhSFZhUkVGNFVqSldSVlZyTlZOU1ZXc3dWVEZXVjFsWFJrZGhNMnhYWWxkNGNGUlhjSE5sVm10NllrUlNXazFzV2taVlZtaHJWMVpPU0ZwRVRsVldWbTh3Vkd0VmVGSldSbFZoUjNCT1RVVndkbGRYTVhOUk1rWjBVMnRvVTJKdVFuRmFWM0JEWTBad1JWTlVWbXhXYmtKSVZERmtjMkZ0U2xkWGJUbGFWMGQ0UzFONlJrTlNSVGxaWTBkd1UwMUdiM2hXVldSelltMVNWbVJJUmxCVFJVcFNWVmh3YzA1c2EzZGFSV1JyVm10S01WWkdhRTlYVms1SVdrUk9WVlpXYnpCVWExVjRVbFpHZEZSdGVGTlNWVmw2VmpCV2FrMVdhM2xXYTFaVFlsZDRXVnBYZEVaTk1WRjRWV3RrYTFKdGFFcFpWV1EwVkcxS1NWcDZRbFZOUmtwRVYxUktWMU5HU2xsaVJYQlRZbTFqZDFaR1dtdFRNV3h5VFZWV2FtVnNXazlVVjNCSFZVWmtWMWt6YUdoU1YzaEZWVlprYTFOc1NuVmFla0pWVm0xU1RGZFhjM2hTVjA0MlZtczFWMlZyU25WV1ZXUnpVVEZyZVZaclZsTmlWM2haV2xkMFJrMHhVWGhWYXpsclVqQTBNVnBGWkU5aVJrcEdVbXBPV0ZKWGFIVmFSRUY0VWpKV1JWVnJOVk5TVlhCeFYyeFdVMUl5UmxkYVJGcFNWa2RTVVZaclZtRk5SbVJHWVVjNWFWSlVSbnBhVlZKVFZVWktSbE50Y0dGV1YxSkhXbFpXYzFJeVZrVlZhelZYVFVoQ2NGWkdWbE5sYXpWV1RVaHNUbFpzY0hGVVYzaGhUbFpzZEUxVlpHdFNia0pZV2xWU1UxUnNXWGRqUjJ4VlZsWktObFJzVlhoWFJURklXa1pHYUZaVmNIRlhiRlpUVWpKR1YxcEVXbEpXUjFKUlZtdFZNVTFHYkRaU2FsSlBVbFJHUmxWdE1VOWlSa3BHVW1wT1dGSlhhSFZhUkVGNFVqSldSVlZyTlZOU1ZYQnhWMWN3TVZReGEzbFdhMVpUWWxSR1dsVXdaR3ROTVZKV1YycFNUMUpVUmtaVlZ6RlBZa1pLUmxKcVRsaFNWMDE0VjFSS1YxSldTblJpUm1oc1lUQlZlbFpFUmxOaE1sSkdaRVZrYkZKR1NrOVdha0ozWVZaU1ZsVnVjRTlXVkVaWlZGWldORmxXV2paU2JrSllWbTFSTUZrd1dtOVRWbTk2WVVad2FWTkZOSHBXUkU1M1kyc3dlVk5zVW1sVFNFSk5WRlpvYmsxR1VsWlZhMDVhVFd4YVJsVldhR3RYVms1SVdrUk9WVlpXYnpCVWExVjRWMFpPZEZOck5WTlRSVEI0Vmtkd1NtUXlTWGhoUld4aFRUSm9ZVmxyYUU5Tk1WRjZZMGhLYkZJd2NGVlZiVEZQWWtaS1JsZHVRbGROTTBKRFZHcEJOVlpXY0VsVmEzaFdUVVZ3VGxkWGNFcE5WMHBJVWxod1ZXSnJTa3RWYWtKM1l6RnJlVTFJYUdoU01ERTFWVzAxVDFkc1dYbGhSRnBWVWxadk1GUnJWWGhTVmtaMFZHMTRVMUpWV1hwV01GWnZZbTFSZDAxVlpHeFNSa3BQVm1wQ2QyRldVbFpWYm5CUFZsUlNOVlJWWXpWWFZrNUlXa1JTV0ZZemFEWmFSRUUxVG0xRmVtRkhiRlpOUm5CeFYyeFdVMUl5UmxkYVJGcFNWa2RTVVZaclpGTk5SazE0Vkd0T1ZHSklRa1ZWVjNCRFlVWlplRk50T1ZwWFIzaEVXVlJLUjFaR1JuRlJiVVpYWld0V05GZFdVa3RTTWxKV1pFVmtiRkpHU2s5V2ExWjNZV3h3VmxWclNtdE5WMmhLVjJwT2ExUnNTblZhZWtKVlZsWktSRlpVUm05VFZrNTBWRzE0VTFKVldYcFdNRlp2WW0xUmQwMVZaR3hTUmtwUFZXdFdTMVpHWkVaaFJ6VnJUVmhDV0ZwVlVsTlViRXBHVTIxd1lWWldTa05hUkVadlUxWnZlbHBGTlZOaE0wSnhWMnhXVTFFeVNsZGhSV3hoVFRKU1QxVnROVzVOUmxKV1ZXdE9XazFzV2taVlZtaHJWbTFLU1ZwNlFsVldWa3B5VjFSS1YxSldSbGxhUm14VVVqSlJlbFpHVm1GT1JUVkdUVlZXVW1KRk5WcFZNR1JyVFRGUmQxZHFVazlTVkVaR1ZWY3hUMkpHU2taU2FrNVlVbGRvZFZwRVFYaFNNVTUwVkcxNFUxSldWalZXTUZadlltMVJkMDFWWkd4U1JrcFBWV3RXUzJGc2NGWlZhMHByVFZaYWVscFZVbE5VYkZsM1kwZHdZVlpXU2tOYVJFWnZVMVp2ZWxwRk5WTmliV04zVmtaV1UxRXhWWGhoUld4aFRUSm9ZVlJXYUc1TlJsSldWV3RPV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVm5CTVYxUktWMUpXU25Sa1JteFVVakpSZWxaR1ZtRk9SVFZHVFZWV1VtSlZOWE5WYTFaSFRURmFXR1ZFVWs5U1ZFWlpWbTB4VDJKR1NrWlNhazVZVWxkb2RWcEVRWGhTTWxaRlZXczFVMUpWY0ZWV01GWnZZbTFXUjJOSVRteFNSa3BQVld0V1MyRnNjRlpWYTBwclRWZG9TbGRxVG10VWJFcHlZa2MxV0ZKWGFIVmFSRUY0VWpKV1JWVnJOVk5TVlhCeFYyeFdVMUZ0VVhoV2JrSlRZbFUxYzFWclZrZE5NV1JHWVVjMWEwMUVSa2hhVlZKVFZHeEtSbE5zVWxoU1YyaDFXbFZWZUZZeVZrVlZhelZUVWxWd2NWZHNWbE5SYlZGNFlVVnNZVTB5VWs5VmJYUnpZMFprUm1GSE5XdE5SRVpJV2xWU1UxUnNTa1pUYlhCaFZsWktRMXBFUmxkak1sWkZWV3MxVTFKV2NIRlhiRlpUVVcxUmVHRkZiR0ZOTWxKUFZXMDFiazFHVWxaVmEwNVdUVWQwTkZwVlVsTlViRXBHVTIxd1lWWldTa05hUkVadlUxWnZlbHBGTlZOaE1uaDVWakJXYjJKdFVYZE5WV1JzVWtaS1QxVnJWa3RoYkhCV1ZXdEthMDFJVWtoYVZWSlRWR3hLUjFkdGNHRldWa3BEV2tSR2IxTldiM3BhUlRWVFltMWpkMVpHVmxOUk1WVjNZMFprYkZKR1NrOVZhMVpMWVd4d1ZsVnJTbXROVjJoS1YycE9hMVJzU25KaVNGSllVbGRvZFZwRVFYaFNNbFpGVldzMVUxSlZjSEZYYkZaVFVXMVJlRlp1VG10TmFsWmFWVEJrYTAweFVsWlhhbEpQVWxSR1JsVlhNVTlpUmtwR1VtcE9WMVl5ZUhaWFZFcFhVbFpHV1ZwR2JGUlNNbEY2VmtaV1lVNUZOVVpOVlZaU1lrVTFXbFV3Wkd0T1JsRjNWMnBTVDFKVVJrWlZWekZQWWtaS1JsSnFUbGhTVjJoMVdrUkJlRkpIUmtoVWJYaFRVbFZaZWxZd1ZtOWliVkYzVFZWa2JGSkdTazlWYTFaTFlXeHdWbFZyU210TlNGSklXbFZTVTFSc1NrWlRiWEJoVmxaS1ExcEVSbTlUVm05NldrVTFVMkp0WTNkV1JsWlRVVEpXYzJGRmJHRk5NbEpQV1d0b2JrMUdVbFpWYTA1YVRXeGFSbFZXYUd0WFZrNUlXa1JPVlZaWFVsUlpiWGhYWXpKV1JWVnJOVmRTTW1oeFYyeFdVMUZ0VVhoaFJXeGhUVEpTVDFWdE5XNU5SbEpXVld0T1ZrMVhhRXBYYWs1clZHeEtkVnA2UWxWV1ZrcEVWMVJLVjFKV1JsbGFSM0JzVjBWS2NWZHNWbE5SYlZGNFlVVnNZVTB5VWs5VmJUVnVUVVpTVmxWclRscE5iRnBHVlZab2ExZFdUa2hhUkU1VlZteHZNRnBXV205VFZtOTZXa1UxVjJKdFkzZFdSbFpUVmpGcmVWWnJWbEpYUjJoYVZUQmthMDB4VW5OWGFsSlBVbFJHUmxWWE1VOWhiVXBKV25wQ1ZWWldTa2hYVkVwWFVsWkdXV05HYkZSU01sRjZWa1phWVU1Rk5VWk5WV2hWWWxVMWMxVnJWa2RPUm1SR1dYcEdXazFzV2taVlZtaHZWMVpPU0ZwRVVsVldNMmN3Vkd0VmVGSldTbGhrUm14VVVqSlJlbFpHV21GT1JUVkdUVlpvVkdKVk5YTlZhMVpIVGtaa1JtRkdUbHBOYkZwR1ZWWm9iMWRXVGtaalIzQmhWbFpLUTFwVldtOVRSVFZZVkcxNFUxSlZXVEJXTUZadlltMVJlR0pJVG14U1JrcFBWV3RWTVdGc2NGWlZhMXBzWWtkb1NsZHFUbXRVYkZwMVducENWVlpXU2xoWFZFcFhVbFpHV1dGR2JGTmxiRnB4VjJ4V1UxRnRWa2RoUld4VVlsVTFjMVZyVmtkT1JtUkdZVWMxYTAxRVZsaGFWVkpUVkd4S1JsZHRjRnBpV0djd1ZHdFZlRkpXU25SalJteFVVakpSZWxaR1ZtRk9SVFZHVFZWV1VtSlZOWE5WYTFaSFRURmtSbUZITld0TlJFWklXbFZTVTFSc1NrWlRiWEJoVmxaS1ExcEVSbTlUVm05NldrVTFVMkp0WTNkV1JsWlRVVEZyZVZaclZsSlhSMmhhVlRCa2EwMHhVbFpYYWxKUFVsUkdSbFZYTVU5aVJrcEdVbXBPVmxaRldUQlVhMVY0VWxaR2RGUnRlRk5TVlZsNlZqQldiMkp0VVhkTlZXeFZZbFUxYzFWclZsWmxWbVJHWVVjMWEwMUVSa2hhVlZKVFZHeEtSbE50Y0dGV1ZrcERXa1JHZDFJeVZrVlZhelZUVWxad2NWZHNWbE5SYlZGNFUxaGthRkpGU2xwVk1HUnJUVEZTVmxkcVVrOVNWRVpHVlZjMVIxZFdUa2hhUkU1VlZteHZNRlJyVlhoU1ZrWjFVbXhzVkZJeVVYcFdSbVEwVGtVMVJrMVZWbEppVlRWelZXdGthMDVzWkVaaFJ6VnJUVVJHU0ZwVlVsTlViRXBHVTIxd1lWWldTa05hVlZwM1VqSldSVlZyTlZOU1ZYQnhWMnhXVTFGdFVYaFdhbFpvVWpBMWMxVnJWa2RPVm1SR1lVYzFhMDFFUmtoYVZWSlRWR3hLUmxOdGNHRldWa3BEV2tSR1UyUldVblJVYlhoVFVsWndlVll3Vm05aWJWRjNUVlZrYkZKR1NrOVZhMVpMWVd4d1ZsVnJTbXROVjJoS1YycE9iMWR0U2tsVWFrNVZUVE5DZVZSVVNrdFdSMFpJVkcxNFUxSldjSGRXYWs1M1VXczBkMDlXVmxOaWJFcExWbTAxYmsxR1VsZGFSWFJhWVhwR1Jsa3pjRmRVTURGeFVXNWtWRlpXV2xoVWEyUkhWMVpXV0U5V2JGUlNNbEY2VmtaU1IwNUZOVVpOVlZaU1lsVTFjMVZyVmtkTk1XUkdZVWMxYTAxRVJraFZNakZQWVcxS1NWcDZRbFZXVmtwRVYxUktWMUpXUmxsYVJteFVVakpSZWxaR1ZtRlRNV3Q1Vm10V1VsZElRbHBWTUdSclRURlNWbGRxVWs5U1ZFWkdWVmN4VDJKR1NrWlNhazVYVmpKNFVGZFVTbGRTVmtaWldrWnNWRkl5VVhwV1JsWmhUa1UxUmsxVlZsSldlbXhhVlRCa2EwMHhVbFpYYWxKUFVsUkdSbFZYTVU5aVJrcEdVbXBPV0ZKWGFIVmFSRUY0VWtkR1NGUnRlRk5TVlZsNlZqQldiMkp0VVhkTlZXUnNVa1pLVDFWclZrdGhiSEJXVld0S2EwMUlVa2hhVlZKVFZHeEtSbE50Y0dGV1ZrcERXa1JHYjFOV2IzcGFSVFZUWW0xamQxWkdWbE5STWxaellVVnNZVTB5VWs5WmEyaHVUVVpTVmxWclRscE5iRnBHVlZab2ExZFdUa2hhUkU1VlZsZFNWRmx0ZUZkak1sWkZWV3MxVjFJemFIRlhiRlpUVVcxUmVHRkZiR0ZOTWxKUFZXMDFiazFHVWxaVmEwNXFUVmRvU2xkcVRtdFViRXAxV25wQ1ZWWldTa1JYVkVwWFVsWkdXVnBIY0U1WFIyTjNWa1pXVTFVeGEzbFdhMVpTVjBkU1dsVXdaR3ROTVZKV1YycFNUMUpVUmtaVlZ6RlBZa1pLUmxKcVRsaFNWMmgxV2tSQmVGWXlWa1ZWYXpWVFVteHdjVmRzVmxOUmJWWklWV3RrYkZKR1NrOVZhMlJ2WVd4d1ZsVnJTbXROVjJoS1YycE9hMVJzU25WYWVrSlZWbFpLUkZkdGVHNWxWVEZZWVVkb1YyVnNXblJXTUdoellqRnJlVlpyVmxOV1JUVmFWVEJrYTAweFVsWlhhbEpQVWxSR1JsVlhNVTlpUmtwR1VtcE9WMVl6WnpCYVZscHZVMVp2ZWxwRk5WTmliV04zVmtaV1UxRXhhM2xXYTFaU1YwZFNWMWxyYUc1TlJsSlhXa1prV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVm04d1ZHdFZlRkpXUm5OVWJHeFVVakpSZWxaR1VrZE9SVFZHVFZWV1VtSlZOWE5WYTFaSFRURmtSbUZITld0TlJFWktWbGN4VDJFeFNuVmFla0pWVmxaS1JGZFVTbGRTVmtaWldrWnNWRkl5VVhwV1JsWnJZekF4UjJOR2JGUmhhMHB3VkZkd2MyVnNiRFpTYTNSYVRXeGFSbFZXVWs5WFZrNUlXa1JPVlZaV2J6QlVhMVY0VWxaR2RGUnRlRk5TVlZsNlZteGtORTVGTlVaTlZtaFVZbFUxYzFWclZrZE5NV1JHWVVjMWEwMUVSa2hhVlZKVFZHeEtSbE5ZWkZoU1YyaDFXa1JCTVdNeVZrVlZhelZUVWxWd2NWZHNWbE5SYlZGNFlVVnNZVTB5VWs5Vk1GWjNZakZzZEUxV1RtdGlWWEJhVmxjeFQyRXhTblZhZWtKVlZsWktSRmRVU2xkU1ZrWlpXa1pzVkZJeVVYcFdSbFp2VlRKSmVWUnVVbGRpVjJob1ZXcEtORTFXWkhGVWJFNWFUV3hhUmxWV1VrTlhWazVJV2tST1ZWWldiekJVYTFWNFVsWkdkRlJ0ZUZOU1ZWbDZWMVpqTVZReVVuUlRibFpXWWxVMWMxVnJWbFprTVdSR1lVYzFhMDFFUmtoYVZWSlRWR3hLUmxOdGNHRldWa3BEV2tSS1MxZFdXblZVYlhSVFRXNW5lbGRVU1hkT1YwWnpZMFpzVldKdVFtOVdibkJYWkZaU1NFNVZUbXRpVld3MVdsVmFUMWRXVGtoYVJFNVZWbFp2TUZSclZYaFNWa1owVkcxNFUxSlZXWHBXTUZadlltMVJkMDFWYkZaaVZUVnpWV3RXVjA1c1pFWmhSelZyVFVSR1NGcFZVbE5VYkVwR1UyMXdZVlpXU2tOYVJFcFBaRVphZFdGSGRGZE5WbTh5VjJ0V2IxUnRVbGRqUm14b1VqTkNhRll3Vmtwa01XeFhXWHBXYTFZd01UUlZNakZQWWtaS1JsSnFVbGhTVjJoMVdrUkJlRkl5VmtWVmF6VlRVbFZ3Y1Zkc1ZsTlJiVkY1Vld0a2JGSkdTazlWYTFwM1lXeHdWbFZyU210TlYyaEtWMnBPYTFSc1NuVmFla0pWVmxaS1JGcFdXbmRYUjFaSlYyeHdWMDFWYkROV01GWnZZbTFXUmsxWVRteFNSa3BQVld0V1MyRnNjRlpWYTBwclRWZG9TbGRxVG10VWJFNUdUbGhPWVZKWFVsUlphMXAzWkVaS2NWSnRiRlJTYTNCNlYxY3dlRlF5VW5OalJXaHBVMFphYUZSV1ZuZGhiSEJXVld0T2FGWnRhRXBYYWs1clZHeEtkVnA2UWxWV1ZrcEVWMVJLVjFKV1JsbGFSbHBwVTBkamQxWkdWbXRaVm10NVZtdFdVbGRIVWxwVk1HUnJUVEZTVmxkcVVrOVNWRVpHVlZkNFQxZFdUa2hhUkZKVlZteHZNRlJyVlhoU1ZrWjBWRzE0VTFKVldYcFdNRlp2WW0xUmQwMVZaRlJpVlRWelZXdFdWMDB4WkVaaFJ6VnJUVVJHU0ZwVlVsTlViRXBHVTIxd1lWWldTa05hUkVaWFl6SldSVlZyTlZkU01VcHhWMnhXVTFGdFVYaGhSV3hoVFRKU1QxVnROVzVOUmxKV1ZXdE9WazFYYUVwWGFrNXZWVVpLZFZwNlFsVldWa3BFVjFSS1YxSldSbGxhUm14VVVqSlJlbFpHVm1GVE1XdDVWbXRXVTFaR1dscFZNR1JyVFRGU1ZsZHFVazlTVkVaR1ZWY3hUMkpHU2taU2FrNWhVbFp2TUZSclZYaFNWMFpJVkcxNFUxSlZXWHBXTUZadlltMVJkMDFWWkd4U1JrcFBWV3RXUzJKV1pFVlRWRVpvVWpCd1dWWnRNV0ZYVjFaWVlVZHdZVlpXU2tOYVJFWnZVMVp2ZWxwRk5WTmliV04zVmtaV1UxRXhhM2xXYTFaU1YwZFNUVlZ0Tlc1TlJsSldWV3RPV2sxc1drWlZWbWhyVjFaT1NGcEVUbFZXVm04d1ZHdFZlRkpXUmxoUFZteFVVakpSZWxaR1ZtRk9SVFZHVFZWV1VtSlZOWE5WYTFaSFRURmtSbUZITld0TlJFWktWa2N4VDJKR1NrWlNhbFpZVWxkb2RWcEVRWGhTTWxaRlZXczFVMUpWY0hGWGJGWlRVVzFSZUdORmFHRlNSVXBhVlRCa2EwMHhVWGRYYWxKUFVsUkdSbFZYTVU5aVJrcEdVbXBPV0ZKWGFIVmFSRUY0VWxkV1NWVnRiRTVpUld3MFYxZDBhMVpyYzNoaFJXeGhUVEpTVDFSV2FHNU5SbEpXVld0T1drMXNXa1pWVm1oclYxWk9TRnBFVGxWV1YyaFFWMVJLVjFKV1NuUmhSbXhVVWpKUmVsWkdWbUZPUlRWR1RWVldVbUpWTlhOVmExWkhUVEZ3VmxkcVVrOVNWRVpHVlcweFQySkdTa1pXYWs1WVVsZG9kVnBFUVhoV01sWkZWV3MxVjFKVmNIRlhiRlpUVVcxV1IyRkZhRTlXTURWelZXdFdSMDVHWkVaaFJYUmFUV3hhUmxWV2FIZFhWazVIVTIxd1lWWldTa1JaYkZwdlUxWnZlbHBGT1dsVFIyTjNWa1pXVTFVeGEzbFZhMlJzVWtaS1QxVnFRVEZoYkhCR1YycFNUMUpVUmxaVmJURlBZVEZLZFZwNlFsVldiRXAyVjFSS1UxSXlWa1ZWYXpWWFRVWndjVmRyVm1GT1JUVkdUVlZXVm1KVk5YTlZhMVpMWTFaa1JtRkhOV3ROUkVaVlYxUk9RMVJHVmxWTlJHeExaVmQwZDBwNWEzQW5LU2s9Jykp'))'))